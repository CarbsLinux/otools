COMPRESS(3)              BSD Library Functions Manual              COMPRESS(3)

[1mNAME[0m
     [1mcompress[22m, [1mzlibVersion[22m, [1mdeflateInit[22m, [1mdeflate[22m, [1mdeflateEnd[22m, [1minflateInit[22m,
     [1minflate[22m, [1minflateEnd[22m, [1mdeflateInit2[22m, [1mdeflateSetDictionary[22m,
     [1mdeflateGetDictionary[22m, [1mdeflateCopy[22m, [1mdeflateReset[22m, [1mdeflateParams[22m,
     [1mdeflateTune[22m, [1mdeflateBound[22m, [1mdeflatePending[22m, [1mdeflatePrime[22m,
     [1mdeflateSetHeader[22m, [1minflateInit2[22m, [1minflateSetDictionary[22m,
     [1minflateGetDictionary[22m, [1minflateSync[22m, [1minflateCopy[22m, [1minflateReset[22m,
     [1minflateReset2[22m, [1minflatePrime[22m, [1minflateMark[22m, [1minflateGetHeader[22m,
     [1minflateBackInit[22m, [1minflateBack[22m, [1minflateBackEnd[22m, [1mzlibCompileFlags[22m,
     [1mcompress2[22m, [1mcompressBound[22m, [1muncompress[22m, [1muncompress2[22m, [1mgzopen[22m, [1mgzdopen[22m,
     [1mgzbuffer[22m, [1mgzsetparams[22m, [1mgzread[22m, [1mgzfread[22m, [1mgzwrite[22m, [1mgzfwrite[22m, [1mgzprintf[22m,
     [1mgzputs[22m, [1mgzgets[22m, [1mgzputc[22m, [1mgzgetc[22m, [1mgzungetc[22m, [1mgzflush[22m, [1mgzseek[22m, [1mgzrewind[22m,
     [1mgztell[22m, [1mgzoffset[22m, [1mgzeof[22m, [1mgzdirect[22m, [1mgzclose[22m, [1mgzclose_r[22m, [1mgzclose_w[22m,
     [1mgzerror[22m, [1mgzclearerr[22m, [1madler32[22m, [1madler32_z[22m, [1madler32_combine[22m, [1mcrc32[22m, [1mcrc32_z[22m,
     [1mcrc32_combine [22m— zlib general purpose compression library

[1mSYNOPSIS[0m
     [1m#include <zlib.h>[0m

     Basic functions

     [4mconst[24m [4mchar[24m [4m*[0m
     [1mzlibVersion[22m([4mvoid[24m);

     [4mint[0m
     [1mdeflateInit[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m);

     [4mint[0m
     [1mdeflate[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mflush[24m);

     [4mint[0m
     [1mdeflateEnd[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1minflateInit[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1minflate[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mflush[24m);

     [4mint[0m
     [1minflateEnd[22m([4mz_streamp[24m [4mstrm[24m);

     Advanced functions

     [4mint[0m
     [1mdeflateInit2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mmethod[24m, [4mint[24m [4mwindowBits[24m,
         [4mint[24m [4mmemLevel[24m, [4mint[24m [4mstrategy[24m);

     [4mint[0m
     [1mdeflateSetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mconst[24m [4mBytef[24m [4m*dictionary[24m,
         [4muInt[24m [4mdictLength[24m);

     [4mint[0m
     [1mdeflateGetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mBytef[24m [4m*dictionary[24m,
         [4muInt[24m [4m*dictLength[24m);

     [4mint[0m
     [1mdeflateCopy[22m([4mz_streamp[24m [4mdest[24m, [4mz_streamp[24m [4msource[24m);

     [4mint[0m
     [1mdeflateReset[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1mdeflateParams[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mstrategy[24m);

     [4mint[0m
     [1mdeflateTune[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mgood_length[24m, [4mint[24m [4mmax_lazy[24m,
         [4mint[24m [4mnice_length[24m, [4mint[24m [4mmax_chain[24m);

     [4muLong[0m
     [1mdeflateBound[22m([4mz_streamp[24m [4mstrm[24m, [4muLong[24m [4msourceLen[24m);

     [4mint[0m
     [1mdeflatePending[22m([4mz_streamp[24m [4mstrm[24m, [4munsigned[24m [4m*pending[24m, [4mint[24m [4m*bits[24m);

     [4mint[0m
     [1mdeflatePrime[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mbits[24m, [4mint[24m [4mvalue[24m);

     [4mint[0m
     [1mdeflateSetHeader[22m([4mz_streamp[24m [4mstrm[24m, [4mgz_headerp[24m [4mhead[24m);

     [4mint[0m
     [1minflateInit2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mwindowBits[24m);

     [4mint[0m
     [1minflateSetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mconst[24m [4mBytef[24m [4m*dictionary[24m,
         [4muInt[24m [4mdictLength[24m);

     [4mint[0m
     [1minflateGetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mBytef[24m [4m*dictionary[24m,
         [4muInt[24m [4m*dictLength[24m);

     [4mint[0m
     [1minflateSync[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1minflateCopy[22m([4mz_streamp[24m [4mdst[24m, [4mz_streamp[24m [4msource[24m);

     [4mint[0m
     [1minflateReset[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1minflateReset2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mwindowBits[24m);

     [4mint[0m
     [1minflatePrime[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mbits[24m, [4mint[24m [4mvalue[24m);

     [4mint[0m
     [1minflateMark[22m([4mz_streamp[24m [4mstrm[24m);

     [4mint[0m
     [1minflateGetHeader[22m([4mz_streamp[24m [4mstrm[24m, [4mgz_headerp[24m [4mhead[24m);

     [4mint[0m
     [1minflateBackInit[22m([4mz_stream[24m [4m*strm[24m, [4mint[24m [4mwindowBits[24m,
         [4munsigned[24m [4mchar[24m [4mFAR[24m [4m*window[24m);

     [4mint[0m
     [1minflateBack[22m([4mz_stream[24m [4m*strm[24m, [4min_func[24m [4min[24m, [4mvoid[24m [4mFAR[24m [4m*in_desc[24m, [4mout_func[24m [4mout[24m,
         [4mvoid[24m [4mFAR[24m [4m*out_desc[24m);

     [4mint[0m
     [1minflateBackEnd[22m([4mz_stream[24m [4m*strm[24m);

     [4muLong[0m
     [1mzlibCompileFlags[22m([4mvoid[24m);

     Utility functions

     [1mtypedef voidp gzFile;[0m

     [4mint[0m
     [1mcompress[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m,
         [4muLong[24m [4msourceLen[24m);

     [4mint[0m
     [1mcompress2[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m,
         [4muLong[24m [4msourceLen[24m, [4mint[24m [4mlevel[24m);

     [4muLong[0m
     [1mcompressBound[22m([4muLong[24m [4msourceLen[24m);

     [4mint[0m
     [1muncompress[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m,
         [4muLong[24m [4msourceLen[24m);

     [4mint[0m
     [1muncompress2[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m,
         [4muLong[24m [4m*sourceLen[24m);

     [4mgzFile[0m
     [1mgzopen[22m([4mconst[24m [4mchar[24m [4m*path[24m, [4mconst[24m [4mchar[24m [4m*mode[24m);

     [4mgzFile[0m
     [1mgzdopen[22m([4mint[24m [4mfd[24m, [4mconst[24m [4mchar[24m [4m*mode[24m);

     [4mint[0m
     [1mgzbuffer[22m([4mgzFile[24m [4mfile[24m, [4munsigned[24m [4msize[24m);

     [4mint[0m
     [1mgzsetparams[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mstrategy[24m);

     [4mint[0m
     [1mgzread[22m([4mgzFile[24m [4mfile[24m, [4mvoidp[24m [4mbuf[24m, [4munsigned[24m [4mlen[24m);

     [4mint[0m
     [1mgzfread[22m([4mvoidp[24m [4mbuf[24m, [4mz_size_t[24m [4msize[24m, [4mz_size_t[24m [4mnitems[24m, [4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzwrite[22m([4mgzFile[24m [4mfile[24m, [4mvoidpc[24m [4mbuf[24m, [4munsigned[24m [4mlen[24m);

     [4mint[0m
     [1mgzfwrite[22m([4mvoidpc[24m [4mbuf[24m, [4mz_size_t[24m [4msize[24m, [4mz_size_t[24m [4mnitems[24m, [4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzprintf[22m([4mgzFile[24m [4mfile[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

     [4mint[0m
     [1mgzputs[22m([4mgzFile[24m [4mfile[24m, [4mconst[24m [4mchar[24m [4m*s[24m);

     [4mchar[24m [4m*[0m
     [1mgzgets[22m([4mgzFile[24m [4mfile[24m, [4mchar[24m [4m*buf[24m, [4mint[24m [4mlen[24m);

     [4mint[0m
     [1mgzputc[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mc[24m);

     [4mint[0m
     [1mgzgetc[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzungetc[22m([4mint[24m [4mc[24m, [4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzflush[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mflush[24m);

     [4mz_off_t[0m
     [1mgzseek[22m([4mgzFile[24m [4mfile[24m, [4mz_off_t[24m [4moffset[24m, [4mint[24m [4mwhence[24m);

     [4mint[0m
     [1mgzrewind[22m([4mgzFile[24m [4mfile[24m);

     [4mz_off_t[0m
     [1mgztell[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzoffset[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzeof[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzdirect[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzclose[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzclose_r[22m([4mgzFile[24m [4mfile[24m);

     [4mint[0m
     [1mgzclose_w[22m([4mgzFile[24m [4mfile[24m);

     [4mconst[24m [4mchar[24m [4m*[0m
     [1mgzerror[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4m*errnum[24m);

     [4mvoid[0m
     [1mgzclearerr[22m([4mgzFile[24m [4mfile[24m);

     Checksum functions

     [4muLong[0m
     [1madler32[22m([4muLong[24m [4madler[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4muInt[24m [4mlen[24m);

     [4muLong[0m
     [1madler32_z[22m([4muLong[24m [4madler[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4mz_size_t[24m [4mlen[24m);

     [4muLong[0m
     [1madler32_combine[22m([4muLong[24m [4madler1[24m, [4muLong[24m [4madler2[24m, [4mz_off_t[24m [4mlen2[24m);

     [4muLong[0m
     [1mcrc32[22m([4muLong[24m [4mcrc[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4muInt[24m [4mlen[24m);

     [4muLong[0m
     [1mcrc32_z[22m([4muLong[24m [4madler[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4mz_size_t[24m [4mlen[24m);

     [4muLong[0m
     [1mcrc32_combine[22m([4muLong[24m [4mcrc1[24m, [4muLong[24m [4mcrc2[24m, [4mz_off_t[24m [4mlen2[24m);

[1mDESCRIPTION[0m
     This manual page describes the [1mzlib [22mgeneral purpose compression library,
     version 1.2.11.

     The [1mzlib [22mcompression library provides in-memory compression and decom‐
     pression functions, including integrity checks of the uncompressed data.
     This version of the library supports only one compression method
     (deflation) but other algorithms will be added later and will have the
     same stream interface.

     Compression can be done in a single step if the buffers are large enough
     or can be done by repeated calls of the compression function.  In the
     latter case, the application must provide more input and/or consume the
     output (providing more output space) before each call.

     The compressed data format used by default by the in-memory functions is
     the [1mzlib [22mformat, which is a zlib wrapper documented in RFC 1950, wrapped
     around a deflate stream, which is itself documented in RFC 1951.

     The library also supports reading and writing files in gzip(1) (.gz) for‐
     mat with an interface similar to that of stdio(3) using the functions
     that start with "gz".  The gzip format is different from the zlib format.
     gzip is a gzip wrapper, documented in RFC 1952, wrapped around a deflate
     stream.  This library can optionally read and write gzip and raw deflate
     streams in memory as well.

     The zlib format was designed to be compact and fast for use in memory and
     on communications channels.  The gzip format was designed for single-file
     compression on file systems, has a larger header than zlib to maintain
     directory information, and uses a different, slower, check method than
     zlib.

     The library does not install any signal handler.  The decoder checks the
     consistency of the compressed data, so the library should never crash
     even in the case of corrupted input.

     The functions within the library are divided into the following sections:

           [1m-   [22mBasic functions
           [1m-   [22mAdvanced functions
           [1m-   [22mUtility functions
           [1m-   [22mChecksum functions

[1mBASIC FUNCTIONS[0m
     [4mconst[24m [4mchar[24m [4m*[24m [1mzlibVersion[22m([4mvoid[24m);

             The application can compare [1mzlibVersion[22m() and ZLIB_VERSION for
             consistency.  If the first character differs, the library code
             actually used is not compatible with the <[4mzlib.h[24m> header file
             used by the application.  This check is automatically made by
             [1mdeflateInit[22m() and [1minflateInit[22m().

     [4mint[24m [1mdeflateInit[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m);

             The [1mdeflateInit[22m() function initializes the internal stream state
             for compression.  The fields [4mzalloc[24m, [4mzfree[24m, and [4mopaque[24m must be
             initialized before by the caller.  If [4mzalloc[24m and [4mzfree[24m are set to
             NULL, [1mdeflateInit[22m() updates them to use default allocation func‐
             tions.

             The compression level must be Z_DEFAULT_COMPRESSION, or between 0
             and 9: 1 gives best speed, 9 gives best compression, 0 gives no
             compression at all (the input data is simply copied a block at a
             time).

             Z_DEFAULT_COMPRESSION requests a default compromise between speed
             and compression (currently equivalent to level 6).

             [1mdeflateInit[22m() returns Z_OK if successful, Z_MEM_ERROR if there
             was not enough memory, Z_STREAM_ERROR if level is not a valid
             compression level, Z_VERSION_ERROR if the [1mzlib [22mlibrary version
             (zlib_version) is incompatible with the version assumed by the
             caller (ZLIB_VERSION).  [4mmsg[24m is set to null if there is no error
             message.  [1mdeflateInit[22m() does not perform any compression: this
             will be done by [1mdeflate[22m().

     [4mint[24m [1mdeflate[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mflush[24m);

             [1mdeflate[22m() compresses as much data as possible, and stops when the
             input buffer becomes empty or the output buffer becomes full.  It
             may introduce some output latency (reading input without
             producing any output) except when forced to flush.

             The detailed semantics are as follows.  [1mdeflate[22m() performs one or
             both of the following actions:

             Compress more input starting at [4mnext_in[24m and update [4mnext_in[24m and
             [4mavail_in[24m accordingly.  If not all input can be processed (because
             there is not enough room in the output buffer), [4mnext_in[24m and
             [4mavail_in[24m are updated and processing will resume at this point for
             the next call to [1mdeflate[22m().

             Generate more output starting at [4mnext_out[24m and update [4mnext_out[24m and
             [4mavail_out[24m accordingly.  This action is forced if the parameter
             [4mflush[24m is non-zero.  Forcing [4mflush[24m frequently degrades the com‐
             pression ratio, so this parameter should be set only when neces‐
             sary.  Some output may be provided even if [4mflush[24m is not set.

             Before the call to [1mdeflate[22m(), the application should ensure that
             at least one of the actions is possible, by providing more input
             and/or consuming more output, and updating [4mavail_in[24m or [4mavail_out[0m
             accordingly; [4mavail_out[24m should never be zero before the call.  The
             application can consume the compressed output when it wants, for
             example when the output buffer is full (avail_out == 0), or after
             each call to [1mdeflate[22m().  If [1mdeflate[22m() returns Z_OK and with zero
             [4mavail_out[24m, it must be called again after making room in the out‐
             put buffer because there might be more output pending.  See
             [1mdeflatePending[22m(), which can be used if desired to determine
             whether or not there is more output in that case.

             Normally the parameter [4mflush[24m is set to Z_NO_FLUSH, which allows
             [1mdeflate[22m() to decide how much data to accumulate before producing
             output, in order to maximise compression.

             If the parameter [4mflush[24m is set to Z_SYNC_FLUSH, all pending output
             is flushed to the output buffer and the output is aligned on a
             byte boundary, so that the decompressor can get all input data
             available so far.  (In particular [4mavail_in[24m is zero after the call
             if enough output space has been provided before the call.)
             Flushing may degrade compression for some compression algorithms
             and so it should be used only when necessary.  This completes the
             current deflate block and follows it with an empty stored block
             that is three bits plus filler bits to the next byte, followed by
             four bytes (00 00 ff ff).

             If [4mflush[24m is set to Z_PARTIAL_FLUSH, all pending output is flushed
             to the output buffer, but the output is not aligned to a byte
             boundary.  All of the input data so far will be available to the
             decompressor, as for Z_SYNC_FLUSH.  This completes the current
             deflate block and follows it with an empty fixed code block that
             is 10 bits long.  This assures that enough bytes are output in
             order for the decompressor to finish the block before the empty
             fixed codes block.

             If [4mflush[24m is set to Z_BLOCK, a deflate block is completed and
             emitted, as for Z_SYNC_FLUSH, but the output is not aligned on a
             byte boundary, and up to seven bits of the current block are held
             to be written as the next byte after the next deflate block is
             completed.  In this case, the decompressor may not be provided
             enough bits at this point in order to complete decompression of
             the data provided so far to the compressor.  It may need to wait
             for the next block to be emitted.  This is for advanced applica‐
             tions that need to control the emission of deflate blocks.

             If [4mflush[24m is set to Z_FULL_FLUSH, all output is flushed as with
             Z_SYNC_FLUSH, and the compression state is reset so that decom‐
             pression can restart from this point if previous compressed data
             has been damaged or if random access is desired.  Using
             Z_FULL_FLUSH too often can seriously degrade compression.

             If [1mdeflate[22m() returns with avail_out == 0, this function must be
             called again with the same value of the flush parameter and more
             output space (updated [4mavail_out[24m), until the flush is complete
             ([1mdeflate[22m() returns with non-zero [4mavail_out[24m).  In the case of a
             Z_FULL_FLUSH or a Z_SYNC_FLUSH, make sure that [4mavail_out[24m is
             greater than six to avoid repeated flush markers due to avail_out
             == 0 on return.

             If the parameter [4mflush[24m is set to Z_FINISH, pending input is pro‐
             cessed, pending output is flushed and [1mdeflate[22m() returns with
             Z_STREAM_END if there was enough output space.  If [1mdeflate[22m() re‐
             turns with Z_OK or Z_BUF_ERROR, this function must be called
             again with Z_FINISH and more output space (updated [4mavail_out[24m but
             no more input data, until it returns with Z_STREAM_END or an er‐
             ror.  After [1mdeflate[22m() has returned Z_STREAM_END, the only possi‐
             ble operations on the stream are [1mdeflateReset[22m() or [1mdeflateEnd[22m().

             Z_FINISH can be used in the first deflate call after
             [1mdeflateInit[22m() if all the compression is to be done in a single
             step.  In order to complete in one call, [4mavail_out[24m must be at
             least the value returned by [1mdeflateBound[22m() (see below).  Then
             [1mdeflate[22m() is guaranteed to return Z_STREAM_END.  If not enough
             output space is provided, [1mdeflate[22m() will not return Z_STREAM_END,
             and it must be called again as described above.

             [1mdeflate[22m() sets strm->adler to the Adler-32 checksum of all input
             read so far (that is, [4mtotal_in[24m bytes).  If a gzip stream is being
             generated, then strm->adler will be the CRC-32 checksum of the
             input read so far.  (See [1mdeflateInit2[22m() below.)

             [1mdeflate[22m() may update strm->data_type if it can make a good guess
             about the input data type (Z_BINARY or Z_TEXT).  If in doubt, the
             data is considered binary.  This field is only for information
             purposes and does not affect the compression algorithm in any
             manner.

             [1mdeflate[22m() returns Z_OK if some progress has been made (more input
             processed or more output produced), Z_STREAM_END if all input has
             been consumed and all output has been produced (only when [4mflush[0m
             is set to Z_FINISH), Z_STREAM_ERROR if the stream state was in‐
             consistent (for example, if [4mnext_in[24m or [4mnext_out[24m was NULL or the
             state was inadvertently written over by the application), or
             Z_BUF_ERROR if no progress is possible (for example, [4mavail_in[24m or
             [4mavail_out[24m was zero).  Note that Z_BUF_ERROR is not fatal, and
             [1mdeflate[22m() can be called again with more input and more output
             space to continue compressing.

     [4mint[24m [1mdeflateEnd[22m([4mz_streamp[24m [4mstrm[24m);

             All dynamically allocated data structures for this stream are
             freed.  This function discards any unprocessed input and does not
             flush any pending output.

             [1mdeflateEnd[22m() returns Z_OK if successful, Z_STREAM_ERROR if the
             stream state was inconsistent, Z_DATA_ERROR if the stream was
             freed prematurely (some input or output was discarded).  In the
             error case, [4mmsg[24m may be set but then points to a static string
             (which must not be deallocated).

     [4mint[24m [1minflateInit[22m([4mz_streamp[24m [4mstrm[24m);
             The [1minflateInit[22m() function initializes the internal stream state
             for decompression.  The fields [4mnext_in[24m, [4mavail_in[24m, [4mzalloc[24m, [4mzfree[24m,
             and [4mopaque[24m must be initialized before by the caller.  In the cur‐
             rent version of [1minflate[22m(), the provided input is not read or con‐
             sumed.  The allocation of a sliding window will be deferred to
             the first call of [1minflate[22m() (if the decompression does not com‐
             plete on the first call).  If [4mzalloc[24m and [4mzfree[24m are set to NULL,
             [1minflateInit[22m() updates them to use default allocation functions.

             [1minflateInit[22m() returns Z_OK if successful, Z_MEM_ERROR if there
             was not enough memory, Z_VERSION_ERROR if the [1mzlib [22mlibrary ver‐
             sion is incompatible with the version assumed by the caller or
             Z_STREAM_ERROR if the parameters are invalid, such as a null
             pointer to the structure.  [4mmsg[24m is set to null if there is no er‐
             ror message.  [1minflateInit[22m() does not perform any decompression.
             Actual decompression will be done by [1minflate[22m().  So [4mnext_in[24m,
             [4mavail_in[24m, [4mnext_out[24m, and [4mavail_out[24m are unused and unchanged.  The
             current implementation of [1minflateInit[22m() does not process any
             header information — that is deferred until [1minflate[22m() is called.

     [4mint[24m [1minflate[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mflush[24m);
             [1minflate[22m() decompresses as much data as possible, and stops when
             the input buffer becomes empty or the output buffer becomes full.
             It may introduce some output latency (reading input without
             producing any output) except when forced to flush.

             The detailed semantics are as follows.  [1minflate[22m() performs one or
             both of the following actions:

             Decompress more input starting at [4mnext_in[24m and update [4mnext_in[24m and
             [4mavail_in[24m accordingly.  If not all input can be processed (because
             there is not enough room in the output buffer), then [4mnext_in[24m and
             [4mavail_in[24m are updated accordingly, and processing will resume at
             this point for the next call to [1minflate[22m().

             Generate more output starting at [4mnext_out[24m and update [4mnext_out[24m and
             [4mavail_out[24m accordingly.  [1minflate[22m() provides as much output as pos‐
             sible, until there is no more input data or no more space in the
             output buffer (see below about the flush parameter).

             Before the call to [1minflate[22m(), the application should ensure that
             at least one of the actions is possible, by providing more input
             and/or consuming more output, and updating the next_* and avail_*
             values accordingly.  If the caller of [1minflate[22m() does not provide
             both available input and available output space, it is possible
             that there will be no progress made.  The application can consume
             the uncompressed output when it wants, for example when the out‐
             put buffer is full (avail_out == 0), or after each call to
             [1minflate[22m().  If [1minflate[22m() returns Z_OK and with zero [4mavail_out[24m, it
             must be called again after making room in the output buffer be‐
             cause there might be more output pending.

             The [4mflush[24m parameter of [1minflate[22m() can be Z_NO_FLUSH, Z_SYNC_FLUSH,
             Z_FINISH, Z_BLOCK or Z_TREES.  Z_SYNC_FLUSH requests that
             [1minflate[22m() flush as much output as possible to the output buffer.
             Z_BLOCK requests that [1minflate[22m() stop if and when it gets to the
             next deflate block boundary.  When decoding the zlib or gzip for‐
             mat, this will cause [1minflate[22m() to return immediately after the
             header and before the first block.  When doing a raw inflate,
             [1minflate[22m() will go ahead and process the first block, and will re‐
             turn when it gets to the end of that block, or when it runs out
             of data.

             The Z_BLOCK option assists in appending to or combining deflate
             streams.  To assist in this, on return [1minflate[22m() always sets
             strm->data_type to the number of unused bits in the last byte
             taken from strm->next_in, plus 64 if [1minflate[22m() is currently de‐
             coding the last block in the deflate stream, plus 128 if
             [1minflate[22m() returned immediately after decoding an end-of-block
             code or decoding the complete header up to just before the first
             byte of the deflate stream.  The end-of-block will not be indi‐
             cated until all of the uncompressed data from that block has been
             written to strm->next_out.  The number of unused bits may in gen‐
             eral be greater than seven, except when bit 7 of data_type is
             set, in which case the number of unused bits will be less than
             eight.  [4mdata_type[24m is set as noted here every time [1minflate[22m() re‐
             turns for all flush options, and so can be used to determine the
             amount of currently consumed input in bits.

             The Z_TREES option behaves as Z_BLOCK does, but it also returns
             when the end of each deflate block header is reached, before any
             actual data in that block is decoded.  This allows the caller to
             determine the length of the deflate block header for later use in
             random access within a deflate block.  256 is added to the value
             of strm->data_type when [1minflate[22m() returns immediately after
             reaching the end of the deflate block header.

             [1minflate[22m() should normally be called until it returns Z_STREAM_END
             or an error.  However if all decompression is to be performed in
             a single step (a single call to inflate), the parameter [4mflush[0m
             should be set to Z_FINISH.  In this case all pending input is
             processed and all pending output is flushed; [4mavail_out[24m must be
             large enough to hold all the uncompressed data for the operation
             to complete.  (The size of the uncompressed data may have been
             saved by the compressor for this purpose.)  The use of Z_FINISH
             is not required to perform an inflation in one step.  However it
             may be used to inform [1minflate[22m() that a faster approach can be
             used for the single [1minflate[22m() call.  Z_FINISH also informs
             [1minflate[22m() to not maintain a sliding window if the stream com‐
             pletes, which reduces its memory footprint.  If the stream does
             not complete, either because not all of the stream is provided or
             not enough output space is provided, then a sliding window will
             be allocated and [1minflate[22m() can be called again to continue the
             operation as if Z_NO_FLUSH had been used.

             In this implementation, [1minflate[22m() always flushes as much output
             as possible to the output buffer, and always uses the faster ap‐
             proach on the first call.  So the effects of the flush parameter
             in this implementation are on the return value of [1minflate[22m() as
             noted below, when [1minflate[22m() returns early when Z_BLOCK or Z_TREES
             is used, and when [1minflate[22m() avoids the allocation of memory for a
             sliding window when Z_FINISH is used.

             If a preset dictionary is needed after this call (see
             [1minflateSetDictionary[22m() below), [1minflate[22m() sets strm->adler to the
             Adler-32 checksum of the dictionary chosen by the compressor and
             returns Z_NEED_DICT; otherwise it sets strm->adler to the
             Adler-32 checksum of all output produced so far (that is,
             [4mtotal_out[24m bytes) and returns Z_OK, Z_STREAM_END or an error code
             as described below.  At the end of the stream, [1minflate[22m() checks
             that its computed Adler-32 checksum is equal to that saved by the
             compressor and returns Z_STREAM_END only if the checksum is cor‐
             rect.

             [1minflate[22m() can decompress and check either zlib-wrapped or gzip-
             wrapped deflate data.  The header type is detected automatically,
             if requested when initializing with [1minflateInit2[22m().  Any informa‐
             tion contained in the gzip header is not retained unless
             [1minflateGetHeader[22m() is used.  When processing gzip-wrapped deflate
             data, strm->adler32 is set to the CRC-32 of the output produced
             so far.  The CRC-32 is checked against the gzip trailer, as is
             the uncompressed length, modulo 2^32.

             [1minflate[22m() returns Z_OK if some progress has been made (more input
             processed or more output produced), Z_STREAM_END if the end of
             the compressed data has been reached and all uncompressed output
             has been produced, Z_NEED_DICT if a preset dictionary is needed
             at this point, Z_DATA_ERROR if the input data was corrupted (in‐
             put stream not conforming to the [1mzlib [22mformat or incorrect check
             value, in which case strm->msg points to a string with a more
             specific error), Z_STREAM_ERROR if the stream structure was in‐
             consistent (for example, [4mnext_in[24m or [4mnext_out[24m was NULL, or the
             state was inadvertently over by the application), Z_MEM_ERROR if
             there was not enough memory, Z_BUF_ERROR if no progress was pos‐
             sible or if there was not enough room in the output buffer when
             Z_FINISH is used.  Note that Z_BUF_ERROR is not fatal, and
             [1minflate[22m() can be called again with more input and more output
             space to continue compressing.  If Z_DATA_ERROR is returned, the
             application may then call [1minflateSync[22m() to look for a good com‐
             pression block if a partial recovery of the data is desired.

     [4mint[24m [1minflateEnd[22m([4mz_streamp[24m [4mstrm[24m);
             All dynamically allocated data structures for this stream are
             freed.  This function discards any unprocessed input and does not
             flush any pending output.

             [1minflateEnd[22m() returns Z_OK if successful, or Z_STREAM_ERROR if the
             stream state was inconsistent.  In the error case, [4mmsg[24m may be set
             but then points to a static string (which must not be
             deallocated).

[1mADVANCED FUNCTIONS[0m
     The following functions are needed only in some special applications.

     [4mint[24m [1mdeflateInit2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mmethod[24m, [4mint[24m [4mwindowBits[24m,
             [4mint[24m [4mmemLevel[24m, [4mint[24m [4mstrategy[24m);

             This is another version of [1mdeflateInit[22m() with more compression
             options.  The fields [4mnext_in[24m, [4mzalloc[24m, [4mzfree[24m, and [4mopaque[24m must be
             initialized before by the caller.

             The [4mmethod[24m parameter is the compression method.  It must be
             Z_DEFLATED in this version of the library.

             The [4mwindowBits[24m parameter is the base two logarithm of the window
             size (the size of the history buffer).  It should be in the range
             8..15 for this version of the library.  Larger values of this pa‐
             rameter result in better compression at the expense of memory us‐
             age.  The default value is 15 if [1mdeflateInit[22m() is used instead.

             For the current implementation of [1mdeflate[22m(), a [4mwindowBits[24m value
             of 8 (a window size of 256 bytes) is not supported.  As a result,
             a request for 8 will result in 9 (a 512-byte window).  In that
             case, providing 8 to [1minflateInit2[22m() will result in an error when
             the zlib header with 9 is checked against the initialization of
             [1minflate[22m().  The remedy is to not use 8 with [1mdeflateInit2[22m() with
             this initialization, or at least in that case use 9 with
             [1minflateInit2[22m().

             [4mwindowBits[24m can also be -8..-15 for raw deflate.  In this case,
             -windowBits determines the window size.  [1mdeflate[22m() will then gen‐
             erate raw deflate data with no zlib header or trailer, and will
             not compute a check value.

             [4mwindowBits[24m can also be greater than 15 for optional gzip encod‐
             ing.  Add 16 to [4mwindowBits[24m to write a simple gzip header and
             trailer around the compressed data instead of a zlib wrapper.
             The gzip header will have no file name, no extra data, no com‐
             ment, no modification time (set to zero), no header crc, and the
             operating system will be set to the appropriate value, if the op‐
             erating system was determined at compile time.  If a gzip stream
             is being written, strm->adler is a CRC-32 instead of an Adler-32.

             For raw deflate or gzip encoding, a request for a 256-byte window
             is rejected as invalid, since only the zlib header provides a
             means of transmitting the window size to the decompressor.

             The [4mmemLevel[24m parameter specifies how much memory should be allo‐
             cated for the internal compression state.  memLevel=1 uses mini‐
             mum memory but is slow and reduces compression ratio; memLevel=9
             uses maximum memory for optimal speed.  The default value is 8.
             See <[4mzconf.h[24m> for total memory usage as a function of [4mwindowBits[0m
             and [4mmemLevel[24m.

             The [4mstrategy[24m parameter is used to tune the compression algorithm.
             Use the value Z_DEFAULT_STRATEGY for normal data; Z_FILTERED for
             data produced by a filter (or predictor); Z_HUFFMAN_ONLY to force
             Huffman encoding only (no string match), or Z_RLE to limit match
             distances to one (run-length encoding).  Filtered data consists
             mostly of small values with a somewhat random distribution.  In
             this case, the compression algorithm is tuned to compress them
             better.  The effect of Z_FILTERED is to force more Huffman coding
             and less string matching; it is somewhat intermediate between
             Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY.  Z_RLE is designed to be
             almost as fast as Z_HUFFMAN_ONLY, but gives better compression
             for PNG image data.  The [4mstrategy[24m parameter only affects the com‐
             pression ratio but not the correctness of the compressed output,
             even if it is not set appropriately.  Z_FIXED prevents the use of
             dynamic Huffman codes, allowing for a simpler decoder for special
             applications.

             [1mdeflateInit2[22m() returns Z_OK if successful, Z_MEM_ERROR if there
             was not enough memory, Z_STREAM_ERROR if any parameter is invalid
             (such as an invalid method), or Z_VERSION_ERROR if the zlib li‐
             brary version (zlib_version) is incompatible with the version as‐
             sumed by the caller (ZLIB_VERSION).  [4mmsg[24m is set to null if there
             is no error message.  [1mdeflateInit2[22m() does not perform any com‐
             pression: this will be done by [1mdeflate[22m().

     [4mint[24m [1mdeflateSetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mconst[24m [4mBytef[24m [4m*dictionary[24m, [4muInt[0m
             [4mdictLength[24m);

             Initializes the compression dictionary from the given byte se‐
             quence without producing any compressed output.  When using the
             zlib format, this function must be called immediately after
             [1mdeflateInit[22m(), deflateInit2 or [1mdeflateReset[22m(), and before any
             call of [1mdeflate[22m().  When doing raw deflate, this function must be
             called either before any call of [1mdeflate[22m(), or immediately after
             the completion of a deflate block, i.e. after all input has been
             consumed and all output has been delivered when using any of the
             flush options Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, or
             Z_FULL_FLUSH.  The compressor and decompressor must use exactly
             the same dictionary (see [1minflateSetDictionary[22m()).

             The dictionary should consist of strings (byte sequences) that
             are likely to be encountered later in the data to be compressed,
             with the most commonly used strings preferably put towards the
             end of the dictionary.  Using a dictionary is most useful when
             the data to be compressed is short and can be predicted with good
             accuracy; the data can then be compressed better than with the
             default empty dictionary.

             Depending on the size of the compression data structures selected
             by [1mdeflateInit[22m() or [1mdeflateInit2[22m(), a part of the dictionary may
             in effect be discarded, for example if the dictionary is larger
             than the window size provided in [1mdeflateInit[22m() or [1mdeflateInit2[22m().
             Thus the strings most likely to be useful should be put at the
             end of the dictionary, not at the front.  In addition, the cur‐
             rent implementation of [1mdeflate[22m() will use at most the window size
             minus 262 bytes of the provided dictionary.

             Upon return of this function, strm->adler is set to the Adler-32
             value of the dictionary; the decompressor may later use this
             value to determine which dictionary has been used by the compres‐
             sor.  (The Adler-32 value applies to the whole dictionary even if
             only a subset of the dictionary is actually used by the compres‐
             sor.)  If a raw deflate was requested, then the Adler-32 value is
             not computed and strm->adler is not set.

             [1mdeflateSetDictionary[22m() returns Z_OK if successful, or
             Z_STREAM_ERROR if a parameter is invalid (e.g. dictionary being
             NULL) or the stream state is inconsistent (for example if
             [1mdeflate[22m() has already been called for this stream or if not at a
             block boundary for raw deflate).  [1mdeflateSetDictionary[22m() does not
             perform any compression: this will be done by [1mdeflate[22m().

     [4mint[24m [1mdeflateGetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mBytef[24m [4m*dictionary[24m [4muInt[0m
             [4m*dictLength[24m);

             Returns the sliding dictionary being maintained by [1mdeflate[22m().
             [4mdictLength[24m is set to the number of bytes in the dictionary, and
             that many bytes are copied to [4mdictionary[24m.  [4mdictionary[24m must have
             enough space, where 32768 bytes is always enough.  If
             [1mdeflateGetDictionary[22m() is called with dictionary equal to NULL,
             then only the dictionary length is returned, and nothing is
             copied.  Similary, if [4mdictLength[24m is NULL, then it is not set.

             [1mdeflateGetDictionary[22m() may return a length less than the window
             size, even when more than the window size in input has been pro‐
             vided.  It may return up to 258 bytes less in that case, due to
             how zlib's implementation of [1mdeflate[22m() manages the sliding window
             and lookahead for matches, where matches can be up to 258 bytes
             long.  If the application needs the last window-size bytes of in‐
             put, then that would need to be saved by the application outside
             of [1mzlib[22m.

             [1mdeflateGetDictionary[22m() returns Z_OK on success, or Z_STREAM_ERROR
             if the stream state is inconsistent.

     [4mint[24m [1mdeflateCopy[22m([4mz_streamp[24m [4mdest[24m, [4mz_streamp[24m [4msource[24m);

             The [1mdeflateCopy[22m() function sets the destination stream as a com‐
             plete copy of the source stream.

             This function can be useful when several compression strategies
             will be tried, for example when there are several ways of pre-
             processing the input data with a filter.  The streams that will
             be discarded should then be freed by calling [1mdeflateEnd[22m().  Note
             that [1mdeflateCopy[22m() duplicates the internal compression state
             which can be quite large, so this strategy is slow and can con‐
             sume lots of memory.

             [1mdeflateCopy[22m() returns Z_OK if successful, Z_MEM_ERROR if there
             was not enough memory, Z_STREAM_ERROR if the source stream state
             was inconsistent (such as [4mzalloc[24m being NULL).  [4mmsg[24m is left un‐
             changed in both source and destination.

     [4mint[24m [1mdeflateReset[22m([4mz_streamp[24m [4mstrm[24m);

             This function is equivalent to [1mdeflateEnd[22m() followed by
             [1mdeflateInit[22m(), but does not free and reallocate the internal com‐
             pression state.  The stream will leave the compression level and
             any other attributes that may have been set unchanged.

             [1mdeflateReset[22m() returns Z_OK if successful, or Z_STREAM_ERROR if
             the source stream state was inconsistent (such as [4mzalloc[24m or [4mstate[0m
             being NULL).

     [4mint[24m [1mdeflateParams[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mstrategy[24m);

             The [1mdeflateParams[22m() function dynamically updates the compression
             level and compression strategy.  The interpretation of level and
             strategy is as in [1mdeflateInit2[22m().  This can be used to switch be‐
             tween compression and straight copy of the input data, or to
             switch to a different kind of input data requiring a different
             strategy.  If the compression approach (which is a function of
             the level) or the strategy is changed, and if any input has been
             consumed in a previous [1mdeflate[22m() call, then the input available
             so far is compressed with the old level and strategy using de‐
             flate(strm, Z_BLOCK).  There are three approaches for the com‐
             pression levels 0, 1..3, and 4..9, respectively.  The new level
             and strategy will take effect at the next call of [1mdeflate[22m().

             If a deflate(strm, Z_BLOCK) is performed by [1mdeflateParams[22m(), and
             it does not have enough output space to complete, then the param‐
             eter change will not take effect.  In this case, [1mdeflateParams[22m()
             can be called again with the same parameters and more output
             space to try again.

             In order to assure a change in the parameters on the first try,
             the deflate stream should be flushed using [1mdeflate[22m() with Z_BLOCK
             or other flush request until [4mstrm.avail_out[24m is not zero, before
             calling [1mdeflateParams[22m().  Then no more input data should be pro‐
             vided before the [1mdeflateParams[22m() call.  If this is done, the old
             level and strategy will be applied to the data compressed before
             [1mdeflateParams[22m(), and the new level and strategy will be applied
             to the the data compressed after [1mdeflateParams[22m().

             [1mdeflateParams[22m() returns Z_OK on success, Z_STREAM_ERROR if the
             source stream state was inconsistent or if a parameter was in‐
             valid, or Z_BUF_ERROR if there was not enough output space to
             complete the compression of the available input data before a
             change in the strategy or approach.  Note that in the case of a
             Z_BUF_ERROR, the parameters are not changed.  A return value of
             Z_BUF_ERROR is not fatal, in which case [1mdeflateParams[22m() can be
             retried with more output space.

     [4mint[24m [1mdeflateTune[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mgood_length[24m, [4mint[24m [4mmax_lazy[24m, [4mint[0m
             [4mnice_length[24m, [4mint[24m [4mmax_chain[24m);

             Fine tune [1mdeflate[22m()'s internal compression parameters.  This
             should only be used by someone who understands the algorithm used
             by zlib's deflate for searching for the best matching string, and
             even then only by the most fanatic optimizer trying to squeeze
             out the last compressed bit for their specific input data.  Read
             the [4mdeflate.c[24m source code for the meaning of the [4mmax_lazy[24m,
             [4mgood_length[24m, [4mnice_length[24m, and [4mmax_chain[24m parameters.

             [1mdeflateTune[22m() can be called after [1mdeflateInit[22m() or
             [1mdeflateInit2[22m(), and returns Z_OK on success, or Z_STREAM_ERROR
             for an invalid deflate stream.

     [4muLong[24m [1mdeflateBound[22m([4mz_streamp[24m [4mstrm[24m, [4muLong[24m [4msourceLen[24m);

             [1mdeflateBound[22m() returns an upper bound on the compressed size af‐
             ter deflation of [4msourceLen[24m bytes.  It must be called after
             [1mdeflateInit[22m() or [1mdeflateInit2[22m().  and after [1mdeflateSetHeader[22m(),
             if used.  This would be used to allocate an output buffer for de‐
             flation in a single pass, and so would be called before
             [1mdeflate[22m().  If that first [1mdeflate[22m() call is provided the
             [4msourceLen[24m input bytes, an output buffer allocated to the size re‐
             turned by [1mdeflateBound[22m(), and the flush value Z_FINISH, then
             [1mdeflate[22m() is guaranteed to return Z_STREAM_END.  Note that it is
             possible for the compressed size to be larger than the value re‐
             turned by [1mdeflateBound[22m() if flush options other than Z_FINISH or
             Z_NO_FLUSH are used.

     [4mint[24m [1mdeflatePending[22m([4mz_streamp[24m [4mstrm[24m, [4munsigned[24m [4m*pending[24m, [4mint[24m [4m*bits[24m);

             [1mdeflatePending[22m() returns the number of bytes and bits of output
             that have been generated, but not yet provided in the available
             output.  The bytes not provided would be due to the available
             output space having been consumed.  The number of bits of output
             not provided are between 0 and 7, where they await more bits to
             join them in order to fill out a full byte.  If [4mpending[24m or [4mbits[0m
             are NULL, then those values are not set.

             [1mdeflatePending[22m([4mreturns[24m) Z_OK if success, or Z_STREAM_ERROR if the
             source stream state was inconsistent.

     [4mint[24m [1mdeflatePrime[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mbits[24m, [4mint[24m [4mvalue[24m);

             [1mdeflatePrime[22m() inserts [4mbits[24m in the deflate output stream.  The
             intent is that this function is used to start off the deflate
             output with the bits left over from a previous deflate stream
             when appending to it.  As such, this function can only be used
             for raw deflate, and must be used before the first [1mdeflate[22m() call
             after a [1mdeflateInit2[22m() or [1mdeflateReset[22m().  [4mbits[24m must be less than
             or equal to 16, and that many of the least significant bits of
             [4mvalue[24m will be inserted in the output.

             [1mdeflatePrime[22m() returns Z_OK if successful, Z_BUF_ERROR if there
             was not enough room in the internal buffer to insert the bits, or
             Z_STREAM_ERROR if the source stream state was inconsistent.

     [4mint[24m [1mdeflateSetHeader[22m([4mz_streamp[24m [4mstrm[24m, [4mgz_headerp[24m [4mhead[24m);

             [1mdeflateSetHeader[22m() provides gzip header information for when a
             gzip stream is requested by [1mdeflateInit2[22m().  [1mdeflateSetHeader[22m()
             may be called after [1mdeflateInit2[22m() or [1mdeflateReset[22m() and before
             the first call of [1mdeflate[22m().  The text, time, os, extra field,
             name, and comment information in the provided gz_header structure
             are written to the gzip header (xflag is ignored - the extra
             flags are set according to the compression level).  The caller
             must assure that, if not NULL, [4mname[24m and [4mcomment[24m are terminated
             with a zero byte, and that if [4mextra[24m is not NULL, that [4mextra_len[0m
             bytes are available there.  If hcrc is true, a gzip header CRC is
             included.  Note that the current versions of the command-line
             version of gzip(1) do not support header CRCs, and will report
             that it is a “multi-part gzip file” and give up.

             If [1mdeflateSetHeader[22m() is not used, the default gzip header has
             text false, the time set to zero, and os set to 255, with no ex‐
             tra, name, or comment fields.  The gzip header is returned to the
             default state by [1mdeflateReset[22m().

             [1mdeflateSetHeader[22m() returns Z_OK if successful, or Z_STREAM_ERROR
             if the source stream state was inconsistent.

     [4mint[24m [1minflateInit2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mwindowBits[24m);

             This is another version of [1minflateInit[22m() with an extra parameter.
             The fields [4mnext_in[24m, [4mavail_in[24m, [4mzalloc[24m, [4mzfree[24m, and [4mopaque[24m must be
             initialized before by the caller.

             The [4mwindowBits[24m parameter is the base two logarithm of the maximum
             window size (the size of the history buffer).  It should be in
             the range 8..15 for this version of the library.  The default
             value is 15 if [1minflateInit[22m() is used instead.  [4mwindowBits[24m must be
             greater than or equal to the [4mwindowBits[24m value provided to
             [1mdeflateInit2[22m() while compressing, or it must be equal to 15 if
             [1mdeflateInit2[22m() was not used.  If a compressed stream with a
             larger window size is given as input, [1minflate[22m() will return with
             the error code Z_DATA_ERROR instead of trying to allocate a
             larger window.

             [4mwindowBits[24m can also be zero to request that inflate use the win‐
             dow size in the zlib header of the compressed stream.

             [4mwindowBits[24m can also be -8..-15 for raw inflate.  In this case,
             -windowBits determines the window size.  [1minflate[22m() will then
             process raw deflate data, not looking for a zlib or gzip header,
             not generating a check value, and not looking for any check val‐
             ues for comparison at the end of the stream.  This is for use
             with other formats that use the deflate compressed data format
             such as zip.  Those formats provide their own check values.  If a
             custom format is developed using the raw deflate format for com‐
             pressed data, it is recommended that a check value such as an
             Adler-32 or a CRC-32 be applied to the uncompressed data as is
             done in the zlib, gzip, and zip formats.  For most applications,
             the zlib format should be used as is.  Note that comments above
             on the use in [1mdeflateInit2[22m() applies to the magnitude of
             [4mwindowBits[24m.

             [4mwindowBits[24m can also be greater than 15 for optional gzip decod‐
             ing.  Add 32 to windowBits to enable zlib and gzip decoding with
             automatic header detection, or add 16 to decode only the gzip
             format (the zlib format will return a Z_DATA_ERROR).  If a gzip
             stream is being decoded, strm->adler is a CRC-32 instead of an
             Adler-32.  Unlike the gunzip(1) utility and [1mgzread[22m() (see below),
             [1minflate[22m() will not automatically decode concatenated gzip
             streams.  [1minflate[22m() will return Z_STREAM_END at the end of the
             gzip stream.  The state would need to be reset to continue decod‐
             ing a subsequent gzip stream.

             [1minflateInit2[22m() returns Z_OK if successful, Z_MEM_ERROR if there
             was not enough memory, Z_VERSION_ERROR if the [1mzlib [22mlibrary ver‐
             sion is incompatible with the version assumed by the caller, or
             Z_STREAM_ERROR if the parameters are invalid, such as a null
             pointer to the structure.  [4mmsg[24m is set to null if there is no er‐
             ror message.  [1minflateInit2[22m() does not perform any decompression
             apart from possibly reading the zlib header if present: actual
             decompression will be done by [1minflate[22m().  (So [4mnext_in[24m and
             [4mavail_in[24m may be modified, but [4mnext_out[24m and [4mavail_out[24m are unused
             and unchanged.)  The current implementation of [1minflateInit2[22m()
             does not process any header information — that is deferred until
             [1minflate[22m() is called.

     [4mint[24m [1minflateSetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mconst[24m [4mBytef[24m [4m*dictionary[24m, [4muInt[0m
             [4mdictLength[24m);

             Initializes the decompression dictionary from the given uncom‐
             pressed byte sequence.  This function must be called immediately
             after a call to [1minflate[22m() if that call returned Z_NEED_DICT.  The
             dictionary chosen by the compressor can be determined from the
             Adler-32 value returned by that call to [1minflate[22m().  The compres‐
             sor and decompressor must use exactly the same dictionary (see
             [1mdeflateSetDictionary[22m()).  For raw inflate, this function can be
             called at any time to set the dictionary.  If the provided dic‐
             tionary is smaller than the window and there is already data in
             the window, then the provided dictionary will amend what's there.
             The application must ensure that the dictionary that was used for
             compression is provided.

             [1minflateSetDictionary[22m() returns Z_OK if successful, Z_STREAM_ERROR
             if a parameter is invalid (e.g. dictionary being NULL) or the
             stream state is inconsistent, Z_DATA_ERROR if the given dictio‐
             nary doesn't match the expected one (incorrect Adler-32 value).
             [1minflateSetDictionary[22m() does not perform any decompression: this
             will be done by subsequent calls of [1minflate[22m().

     [4mint[24m [1minflateGetDictionary[22m([4mz_streamp[24m [4mstrm[24m, [4mBytef[24m [4m*dictionary[24m, [4muInt[0m
             [4m*dictLength[24m);

             Returns the sliding dictionary being maintained by [1minflate[22m().
             [4mdictLength[24m is set to the number of bytes in the dictionary, and
             that many bytes are copied to [4mdictionary[24m.  [4mdictionary[24m must have
             enough space, where 32768 bytes is always enough.  If
             [1minflateGetDictionary[22m() is called with dictionary equal to NULL,
             then only the dictionary length is returned, and nothing is
             copied.  Similary, if [4mdictLength[24m [4mis[24m NULL, then it is not set.

             [1minflateGetDictionary[22m() returns Z_OK on success, or Z_STREAM_ERROR
             if the stream state is inconsistent.

     [4mint[24m [1minflateSync[22m([4mz_streamp[24m [4mstrm[24m);

             Skips invalid compressed data until a possible full flush point
             (see above the description of [1mdeflate[22m() with Z_FULL_FLUSH) can be
             found, or until all available input is skipped.  No output is
             provided.

             [1minflateSync[22m() searches for a 00 00 FF FF pattern in the com‐
             pressed data.  All full flush points have this pattern, but not
             all occurrences of this pattern are full flush points.

             [1minflateSync[22m() returns Z_OK if a possible full flush point has
             been found, Z_BUF_ERROR if no more input was provided,
             Z_DATA_ERROR if no flush point has been found, or Z_STREAM_ERROR
             if the stream structure was inconsistent.  In the success case,
             the application may save the current value of [4mtotal_in[24m which in‐
             dicates where valid compressed data was found.  In the error
             case, the application may repeatedly call [1minflateSync[22m(), provid‐
             ing more input each time, until success or end of the input data.

     [4mint[24m [1minflateCopy[22m([4mz_streamp[24m [4mdest[24m, [4mz_streamp[24m [4msource[24m);

             Sets the destination stream as a complete copy of the source
             stream.

             This function can be useful when randomly accessing a large
             stream.  The first pass through the stream can periodically
             record the inflate state, allowing restarting inflate at those
             points when randomly accessing the stream.

             [1minflateCopy[22m() returns Z_OK if success, Z_MEM_ERROR if there was
             not enough memory, Z_STREAM_ERROR if the source stream state was
             inconsistent (such as [4mzalloc[24m being NULL).  [4mmsg[24m is left unchanged
             in both [4msource[24m and [4mdest[24m.

     [4mint[24m [1minflateReset[22m([4mz_streamp[24m [4mstrm[24m);

             This function is equivalent to [1minflateEnd[22m() followed by
             [1minflateInit[22m(), but does not free and reallocate the internal de‐
             compression state.  The stream will keep attributes that may have
             been set by [1minflateInit2[22m().

             [1minflateReset[22m() returns Z_OK if successful, or Z_STREAM_ERROR if
             the source stream state was inconsistent (such as [4mzalloc[24m or [4mstate[0m
             being NULL).

     [4mint[24m [1minflateReset2[22m([4mz_streamp[24m [4mstrm[24m, [4mint[24m [4mwindowBits[24m);

             This function is the same as [1minflateReset[22m(), but it also permits
             changing the wrap and window size requests.  The [4mwindowBits[24m pa‐
             rameter is interpreted the same as it is for [4minflateInit2[24m.  If
             the window size is changed, then the memory allocated for the
             window is freed, and the window will be reallocated by [1minflate[22m()
             if needed.

             [1minflateReset2[22m() returns Z_OK if success, or Z_STREAM_ERROR if the
             source stream state was inconsistent (such as [4mzalloc[24m or [4mstate[24m be‐
             ing NULL), or if the [4mwindowBits[24m parameter is invalid.

     [4mint[24m [1minflatePrime[22m([4mz_stream[24m [4mstrm[24m, [4mint[24m [4mbits[24m, [4mint[24m [4mvalue[24m);

             This function inserts bits in the inflate input stream.  The in‐
             tent is that this function is used to start inflating at a bit
             position in the middle of a byte.  The provided bits will be used
             before any bytes are used from [4mnext_in[24m.  This function should
             only be used with raw inflate, and should be used before the
             first [1minflate[22m() call after [1minflateInit2[22m() or [1minflateReset[22m().
             [4mbits[24m must be less than or equal to 16, and that many of the least
             significant bits of value will be inserted in the input.

             If [4mbits[24m is negative, then the input stream bit buffer is emptied.
             Then [1minflatePrime[22m() can be called again to put bits in the buf‐
             fer.  This is used to clear out bits left over after feeding
             [1minflate[22m() a block description prior to feeding it codes.

             [1minflatePrime[22m() returns Z_OK if successful, or Z_STREAM_ERROR if
             the source stream state was inconsistent.

     [4mlong[24m [1minflateMark[22m([4mz_streamp[24m [4mstrm[24m);

             This function returns two values: one in the lower 16 bits of the
             return value, and the other in the remaining upper bits, obtained
             by shifting the return value down 16 bits.  If the upper value is
             -1 and the lower value is zero, then [1minflate[22m() is currently de‐
             coding information outside of a block.  If the upper value is -1
             and the lower value is non-zero, then [1minflate[22m() is in the middle
             of a stored block, with the lower value equaling the number of
             bytes from the input remaining to copy.  If the upper value is
             not -1, then it is the number of bits back from the current bit
             position in the input of the code (literal or length/distance
             pair) currently being processed.  In that case the lower value is
             the number of bytes already emitted for that code.

             A code is being processed if [1minflate[22m() is waiting for more input
             to complete decoding of the code, or if it has completed decoding
             but is waiting for more output space to write the literal or
             match data.

             [1minflateMark[22m() is used to mark locations in the input data for
             random access, which may be at bit positions, and to note those
             cases where the output of a code may span boundaries of random
             access blocks.  The current location in the input stream can be
             determined from [4mavail_in[24m and [4mdata_type[24m as noted in the descrip‐
             tion for the Z_BLOCK flush parameter for [1minflate[22m().

             [1minflateMark[22m() returns the value noted above, or -65536 if the
             provided source stream state was inconsistent.

     [4mint[24m [1minflateGetHeader[22m([4mz_streamp[24m [4mstrm[24m, [4mgz_headerp[24m [4mhead[24m);

             [1minflateGetHeader[22m() requests that gzip header information be
             stored in the provided gz_header structure.  [1minflateGetHeader[22m()
             may be called after [1minflateInit2[22m() or [1minflateReset[22m(), and before
             the first call of [1minflate[22m().  As [1minflate[22m() processes the gzip
             stream, head->done is zero until the header is completed, at
             which time head->done is set to one.  If a zlib stream is being
             decoded, then head->done is set to -1 to indicate that there will
             be no gzip header information forthcoming.  Note that Z_BLOCK or
             Z_TREES can be used to force [1minflate[22m() to return immediately af‐
             ter header processing is complete and before any actual data is
             decompressed.

             The text, time, xflags, and os fields are filled in with the gzip
             header contents.  hcrc is set to true if there is a header CRC.
             (The header CRC was valid if done is set to one.)  If extra is
             not NULL, then [4mextra_max[24m contains the maximum number of bytes to
             write to [4mextra[24m.  Once done is true, [4mextra_len[24m contains the actual
             extra field length, and [4mextra[24m contains the extra field, or that
             field truncated if [4mextra_max[24m is less than [4mextra_len[24m.  If name is
             not NULL, then up to [4mname_max[24m characters are written there, ter‐
             minated with a zero unless the length is greater than [4mname_max[24m.
             If comment is not NULL, then up to [4mcomm_max[24m characters are writ‐
             ten there, terminated with a zero unless the length is greater
             than [4mcomm_max[24m.  When any of extra, name, or comment are not NULL
             and the respective field is not present in the header, then that
             field is set to NULL to signal its absence.  This allows the use
             of [1mdeflateSetHeader[22m() with the returned structure to duplicate
             the header.  However if those fields are set to allocated memory,
             then the application will need to save those pointers elsewhere
             so that they can be eventually freed.

             If [1minflateGetHeader[22m() is not used, then the header information is
             simply discarded.  The header is always checked for validity, in‐
             cluding the header CRC if present.  [1minflateReset[22m() will reset the
             process to discard the header information.  The application would
             need to call [1minflateGetHeader[22m() again to retrieve the header from
             the next gzip stream.

             [1minflateGetHeader[22m() returns Z_OK if successful, or Z_STREAM_ERROR
             if the source stream state was inconsistent.

     [4mint[24m [1minflateBackInit[22m([4mz_stream[24m [4m*strm[24m, [4mint[24m [4mwindowBits[24m, [4munsigned[24m [4mchar[24m [4mFAR[0m
             [4m*window[24m);

             Initialize the internal stream state for decompression using
             [1minflateBack[22m() calls.  The fields [4mzalloc[24m, [4mzfree[24m and [4mopaque[24m in [4mstrm[0m
             must be initialized before the call.  If [4mzalloc[24m and [4mzfree[24m are
             NULL, then the default library-derived memory allocation routines
             are used.  [4mwindowBits[24m is the base two logarithm of the window
             size, in the range 8..15.  [4mwindow[24m is a caller supplied buffer of
             that size.  Except for special applications where it is assured
             that [1mdeflate[22m() was used with small window sizes, [4mwindowBits[24m must
             be 15 and a 32K byte window must be supplied to be able to decom‐
             press general deflate streams.

             See [1minflateBack[22m() for the usage of these routines.

             [1minflateBackInit[22m() will return Z_OK on success, Z_STREAM_ERROR if
             any of the parameters are invalid, Z_MEM_ERROR if the internal
             state could not be allocated, or Z_VERSION_ERROR if the version
             of the library does not match the version of the header file.

     [4mint[24m [1minflateBack[22m([4mz_stream[24m [4m*strm[24m, [4min_func[24m [4min[24m, [4mvoid[24m [4mFAR[24m [4m*in_desc[24m, [4mout_func[0m
             [4mout[24m, [4mvoid[24m [4mFAR[24m [4m*out_desc[24m);

             [1minflateBack[22m() does a raw inflate with a single call using a call-
             back interface for input and output.  This is potentially more
             efficient than [1minflate[22m() for file I/O applications, in that it
             avoids copying between the output and the sliding window by sim‐
             ply making the window itself the output buffer.  [1minflate[22m() can be
             faster on modern CPUs when used with large buffers.
             [1minflateBack[22m() trusts the application to not change the output
             buffer passed by the output function, at least until
             [1minflateBack[22m() returns.

             [1minflateBackInit[22m() must be called first to allocate the internal
             state and to initialize the state with the user-provided window
             buffer.  [1minflateBack[22m() may then be used multiple times to inflate
             a complete, raw deflate stream with each call.  [1minflateBackEnd[22m()
             is then called to free the allocated state.

             A raw deflate stream is one with no zlib or gzip header or
             trailer.  This routine would normally be used in a utility that
             reads zip or gzip files and writes out uncompressed files.  The
             utility would decode the header and process the trailer on its
             own, hence this routine expects only the raw deflate stream to
             decompress.  This is different from the default behavior of
             [1minflate[22m(), which expects either a zlib header and trailer around
             the deflate stream.

             [1minflateBack[22m() uses two subroutines supplied by the caller that
             are then called by [1minflateBack[22m() for input and output.
             [1minflateBack[22m() calls those routines until it reads a complete de‐
             flate stream and writes out all of the uncompressed data, or un‐
             til it encounters an error.  The function's parameters and return
             types are defined above in the in_func and out_func typedefs.
             [1minflateBack[22m() will call in(in_desc, &buf) which should return the
             number of bytes of provided input, and a pointer to that input in
             [4mbuf[24m.  If there is no input available, [1min[22m() must return zero — buf
             is ignored in that case — and [1minflateBack[22m() will return a buffer
             error.  [1minflateBack[22m() will call out(out_desc, buf, len) to write
             the uncompressed data buf[0..len-1].  [1mout[22m() should return zero on
             success, or non-zero on failure.  If [1mout[22m() returns non-zero,
             [1minflateBack[22m() will return with an error.  Neither [1min[22m() nor [1mout[22m()
             are permitted to change the contents of the window provided to
             [1minflateBackInit[22m(), which is also the buffer that [1mout[22m() uses to
             write from.  The length written by [1mout[22m() will be at most the win‐
             dow size.  Any non-zero amount of input may be provided by [1min[22m().

             For convenience, [1minflateBack[22m() can be provided input on the first
             call by setting strm->next_in and strm->avail_in.  If that input
             is exhausted, then [1min[22m() will be called.  Therefore strm->next_in
             must be initialized before calling [1minflateBack[22m().  If
             strm->next_in is NULL, then [1min[22m() will be called immediately for
             input.  If strm->next_in is not NULL, then strm->avail_in must
             also be initialized, and then if strm->avail_in is not zero, in‐
             put will initially be taken from strm->next_in[0 ..
             strm->avail_in - 1].

             The [4min_desc[24m and [4mout_desc[24m parameters of [1minflateBack[22m() are passed
             as the first parameter of [1min[22m() and [1mout[22m(), respectively, when they
             are called.  These descriptors can be optionally used to pass any
             information that the caller-supplied [1min[22m() and [1mout[22m() functions
             need to do their job.

             On return, [1minflateBack[22m() will set strm->next_in and
             strm->avail_in to pass back any unused input that was provided by
             the last [1min[22m() call.  The return values of [1minflateBack[22m() can be
             Z_STREAM_END on success, Z_BUF_ERROR if [1min[22m() or [1mout[22m() returned an
             error, Z_DATA_ERROR if there was a format error in the deflate
             stream (in which case strm->msg is set to indicate the nature of
             the error), or Z_STREAM_ERROR if the stream was not properly ini‐
             tialized.  In the case of Z_BUF_ERROR, an input or output error
             can be distinguished using strm->next_in which will be NULL only
             if [1min[22m() returned an error.  If strm->next is not NULL, then the
             Z_BUF_ERROR was due to [1mout[22m() returning non-zero.  ([1min[22m() will
             always be called before [1mout[22m(), so strm->next_in is assured to be
             defined if [1mout[22m() returns non-zero.)  Note that [1minflateBack[22m() can‐
             not return Z_OK.

     [4mint[24m [1minflateBackEnd[22m([4mz_stream[24m [4m*strm[24m);

             All memory allocated by [1minflateBackInit[22m() is freed.

             [1minflateBackEnd[22m() returns Z_OK on success, or Z_STREAM_ERROR if
             the stream state was inconsistent.

     [4muLong[24m [1mzlibCompileFlags[22m([4mvoid[24m);

             This function returns flags indicating compile-time options.

             Type sizes, two bits each:

                   00      16 bits
                   01      32 bits
                   10      64 bits
                   11      other:

                                 1.0     size of uInt
                                 3.2     size of uLong
                                 5.4     size of voidpf (pointer)
                                 7.6     size of z_off_t

             Compiler, assembler, and debug options:

                   8       ZLIB_DEBUG
                   9       ASMV or ASMINF — use ASM code
                   10      ZLIB_WINAPI — exported functions use the WINAPI
                           calling convention
                   11      0 (reserved)

             One-time table building (smaller code, but not thread-safe if
             true):

                   12      BUILDFIXED — build static block decoding tables
                           when needed
                   13      DYNAMIC_CRC_TABLE — build CRC calculation tables
                           when needed
                   14,15   0 (reserved)

             Library content (indicates missing functionality):

                   16      NO_GZCOMPRESS — gz* functions cannot compress (to
                           avoid linking deflate code when not needed)
                   17      NO_GZIP — deflate can't write gzip streams, and in‐
                           flate can't detect and decode gzip streams (to
                           avoid linking CRC code)
                   18-19   0 (reserved)

             Operation variations (changes in library functionality):

                   20      PKZIP_BUG_WORKAROUND — slightly more permissive in‐
                           flate
                   21      FASTEST — deflate algorithm with only one, lowest
                           compression level
                   22,23   0 (reserved)

             The sprintf variant used by gzprintf (zero is best):

                   24      0 = vs*, 1 = s* — 1 means limited to 20 arguments
                           after the format
                   25      0 = *nprintf, 1 = *printf — 1 means [1mgzprintf[22m() not
                           secure!
                   26      0 = returns value, 1 = void — 1 means inferred
                           string length returned

             Remainder:

                   27-31   0 (reserved)

[1mUTILITY FUNCTIONS[0m
     The following utility functions are implemented on top of the basic
     stream-oriented functions.  To simplify the interface, some default op‐
     tions are assumed (compression level and memory usage, standard memory
     allocation functions).  The source code of these utility functions can be
     modified if you need special options.

     [4mint[24m [1mcompress[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m, [4muLong[0m
             [4msourceLen[24m);

             The [1mcompress[22m() function compresses the source buffer into the
             destination buffer.  [4msourceLen[24m is the byte length of the source
             buffer.  Upon entry, [4mdestLen[24m is the total size of the destination
             buffer, which must be at least the value returned by
             [1mcompressBound[22m([4msourcelen[24m).  Upon exit, [4mdestLen[24m is the actual size
             of the compressed data.  [1mcompress[22m() is equivalent to [1mcompress2[22m()
             with a level parameter of Z_DEFAULT_COMPRESSION.

             [1mcompress[22m() returns Z_OK if successful, Z_MEM_ERROR if there was
             not enough memory, or Z_BUF_ERROR if there was not enough room in
             the output buffer.

     [4mint[24m [1mcompress2[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m, [4muLong[0m
             [4msourceLen[24m, [4mint[24m [4mlevel[24m);

             The [1mcompress2[22m() function compresses the source buffer into the
             destination buffer.  The [4mlevel[24m parameter has the same meaning as
             in [1mdeflateInit[22m().  [4msourceLen[24m is the byte length of the source
             buffer.  Upon entry, [4mdestLen[24m is the total size of the destination
             buffer, which must be at least the value returned by
             [1mcompressBound[22m([4msourceLen[24m).  Upon exit, [4mdestLen[24m is the actual size
             of the compressed buffer.

             [1mcompress2[22m() returns Z_OK if successful, Z_MEM_ERROR if there was
             not enough memory, Z_BUF_ERROR if there was not enough room in
             the output buffer, or Z_STREAM_ERROR if the level parameter is
             invalid.

     [4muLong[24m [1mcompressBound[22m([4muLong[24m [4msourceLen[24m);

             [1mcompressBound[22m() returns an upper bound on the compressed size af‐
             ter [1mcompress[22m() or [1mcompress2[22m() on [4msourceLen[24m bytes.  It would be
             used before a [1mcompress[22m() or [1mcompress2[22m() call to allocate the des‐
             tination buffer.

     [4mint[24m [1muncompress[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m, [4muLong[0m
             [4msourceLen[24m);

             The [1muncompress[22m() function decompresses the source buffer into the
             destination buffer.  [4msourceLen[24m is the byte length of the source
             buffer.  Upon entry, [4mdestLen[24m is the total size of the destination
             buffer, which must be large enough to hold the entire uncom‐
             pressed data.  (The size of the uncompressed data must have been
             saved previously by the compressor and transmitted to the decom‐
             pressor by some mechanism outside the scope of this compression
             library.)  Upon exit, [4mdestLen[24m is the actual size of the uncom‐
             pressed data.  This function can be used to decompress a whole
             file at once if the input file is mmap'ed.

             [1muncompress[22m() returns Z_OK if successful, Z_MEM_ERROR if there was
             not enough memory, Z_BUF_ERROR if there was not enough room in
             the output buffer, or Z_DATA_ERROR if the input data was cor‐
             rupted or incomplete.  In the case where there is not enough
             room, [1muncompress[22m() will fill the output buffer with the uncom‐
             pressed data up to that point.

     [4mint[24m [1muncompress2[22m([4mBytef[24m [4m*dest[24m, [4muLongf[24m [4m*destLen[24m, [4mconst[24m [4mBytef[24m [4m*source[24m, [4muLong[0m
             [4m*sourceLen[24m);

             Same as [1muncompress[22m(), except that [4msourceLen[24m is a pointer, where
             the length of the source is [4m*sourceLen[24m.  On return, [4m*sourceLen[24m is
             the number of source bytes consumed.

     [4mgzFile[24m [1mgzopen[22m([4mconst[24m [4mchar[24m [4m*path[24m, [4mconst[24m [4mchar[24m [4m*mode[24m);

             This library supports reading and writing files in gzip (.gz)
             format with an interface similar to that of stdio, using the
             functions that start with "gz".  The gzip format is different
             from the zlib format.  gzip is a gzip wrapper, documented in RFC
             1952, wrapped around a deflate stream.

             The [1mgzopen[22m() function opens a gzip (.gz) file for reading or
             writing.  The mode parameter is as in fopen(3) ("rb" or "wb") but
             can also include a compression level (wb9) or a strategy: ‘f’ for
             filtered data, as in "wb6f"; ‘h’ for Huffman only compression, as
             in "wb1h", or ‘R’ for run-length encoding as in "wb1R", or ‘F’
             for fixed code compression as in "wb9F".  (See the description of
             [1mdeflateInit2[22m() for more information about the strategy parame‐
             ter.)  ‘T’ will request transparent writing or appending with no
             compression and not using the gzip format.

             ‘a’ can be used instead of ‘w’ to request that the gzip stream
             that will be written be appended to the file.  ‘+’ will result in
             an error, since reading and writing to the same gzip file is not
             supported.  The addition of ‘x’ when writing will create the file
             exclusively, which fails if the file already exists.  On systems
             that support it, the addition of ‘e’ when reading or writing will
             set the flag to close the file on an execve(2) call.

             These functions, as well as gzip, will read and decode a sequence
             of gzip streams in a file.  The append function of [1mgzopen[22m() can
             be used to create such a file.  (Also see [1mgzflush[22m() for another
             way to do this.)  When appending, [1mgzopen[22m() does not test whether
             the file begins with a gzip stream, nor does it look for the end
             of the gzip streams to begin appending.  [1mgzopen[22m() will simply ap‐
             pend a gzip stream to the existing file.

             [1mgzopen[22m() can be used to read a file which is not in gzip format;
             in this case [1mgzread[22m() will directly read from the file without
             decompression.  When reading, this will be detected automatically
             by looking for the magic two-byte gzip header.

             [1mgzopen[22m() returns NULL if the file could not be opened, if there
             was insufficient memory to allocate the gzFile state, or if an
             invalid mode was specified (an ‘r’, ‘w’, or ‘a’ was not provided,
             or ‘+’ was provided).  [4merrno[24m can be checked to determine if the
             reason [1mgzopen[22m() failed was that the file could not be opened.

     [4mgzFile[24m [1mgzdopen[22m([4mint[24m [4mfd[24m, [4mconst[24m [4mchar[24m [4m*mode[24m);

             The [1mgzdopen[22m() function associates a gzFile with the file descrip‐
             tor [4mfd[24m.  File descriptors are obtained from calls like open(2),
             dup(2), creat(3), pipe(2), or fileno(3) (if the file has been
             previously opened with fopen(3)).  The [4mmode[24m parameter is as in
             [1mgzopen[22m().

             The next call to [1mgzclose[22m() on the returned gzFile will also close
             the file descriptor fd, just like fclose(fdopen(fd), mode) closes
             the file descriptor fd.  If you want to keep fd open, use “fd =
             dup(fd_keep); gz = gzdopen(fd, mode);”.  The duplicated descrip‐
             tor should be saved to avoid a leak, since [1mgzdopen[22m() does not
             close fd if it fails.  If you are using [1mfileno[22m() to get the file
             descriptor from a FILE *, then you will have to use dup(2) to
             avoid double-closing the file descriptor.  Both [1mgzclose[22m() and
             [1mfclose[22m() will close the associated file descriptor, so they need
             to have different file descriptors.

             [1mgzdopen[22m() returns NULL if there was insufficient memory to allo‐
             cate the gzFile state, if an invalid mode was specified (an 'r',
             'w', or 'a' was not provided, or '+' was provided), or if fd is
             -1.  The file descriptor is not used until the next gz* read,
             write, seek, or close operation, so [1mgzdopen[22m() will not detect if
             fd is invalid (unless fd is -1).

     [4mint[24m [1mgzbuffer[22m([4mgzFile[24m [4mfile[24m, [4munsigned[24m [4msize[24m);

             Set the internal buffer size used by this library's functions.
             The default buffer size is 8192 bytes.  This function must be
             called after [1mgzopen[22m() or [1mgzdopen[22m(), and before any other calls
             that read or write the file.  The buffer memory allocation is al‐
             ways deferred to the first read or write.  Three times that size
             in buffer space is allocated.  A larger buffer size of, for exam‐
             ple, 64K or 128K bytes, will noticeably increase the speed of de‐
             compression (reading).

             The new buffer size also affects the maximum length for
             [1mgzprintf[22m().

             [1mgzbuffer[22m() returns 0 on success, or -1 on failure, such as being
             called too late.

     [4mint[24m [1mgzsetparams[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mstrategy[24m);

             The [1mgzsetparams[22m() function dynamically updates the compression
             level or strategy.  See the description of [1mdeflateInit2[22m() for the
             meaning of these parameters.  Previously provided data is flushed
             before the parameter change.

             [1mgzsetparams[22m() returns Z_OK if successful, Z_STREAM_ERROR if the
             file was not opened for writing, Z_ERRNO if there is an error
             writing the flushed data, or Z_MEM_ERROR if there is a memory al‐
             location error.

     [4mint[24m [1mgzread[22m([4mgzFile[24m [4mfile[24m, [4mvoidp[24m [4mbuf[24m, [4munsigned[24m [4mlen[24m);

             Reads the given number of uncompressed bytes from the compressed
             file.  If the input file is not in gzip format, [1mgzread[22m() copies
             the given number ofbytes into the buffer directly from the file.

             After reaching the end of a gzip stream in the input, [1mgzread[22m()
             will continue to read, looking for another gzip stream.  Any num‐
             ber of gzip streams may be concatenated in the input file, and
             will all be decompressed by [1mgzread[22m().  If something other than a
             gzip stream is encountered after a gzip stream, that remaining
             trailing garbage is ignored (and no error is returned).

             [1mgzread[22m() can be used to read a gzip file that is being concur‐
             rently written.  Upon reaching the end of the input, [1mgzread[22m()
             will return with the available data.  If the error code returned
             by [1mgzerror[22m() is Z_OK or Z_BUF_ERROR, then [1mgzclearerr[22m() can be
             used to clear the end of file indicator in order to permit
             [1mgzread[22m() to be tried again.  Z_OK indicates that a gzip stream
             was completed on the last [1mgzread[22m().  Z_BUF_ERROR indicates that
             the input file ended in the middle of a gzip stream.  Note that
             [1mgzread[22m() does not return -1 in the event of an incomplete gzip
             stream.  This error is deferred until [1mgzclose[22m(), which will re‐
             turn Z_BUF_ERROR if the last [1mgzread[22m() ended in the middle of a
             gzip stream.  Alternatively, [1mgzerror[22m() can be used before
             [1mgzclose[22m() to detect this case.

             [1mgzread[22m() returns the number of uncompressed bytes actually read,
             less than [4mlen[24m for end of file, or -1 for error.  If [4mlen[24m is too
             large to fit in an int, then nothing is read, -1 is returned, and
             the error state is set to Z_STREAM_ERROR.

     [4mz_size_t[24m [1mgzfread[22m([4mvoidp[24m [4mbuf[24m, [4mz_size_t[24m [4msize[24m, [4mz_size_t[24m [4mnitems[24m, [4mgzFile[24m [4mfile[24m);

             Read up to [4mnitems[24m items of size [4msize[24m from [4mfile[24m to [4mbuf[24m, otherwise
             operating as [1mgzread[22m() does.  This duplicates the interface of
             stdio's fread(3), with size_t request and return types.  If the
             library defines size_t, then z_size_t is identical to size_t.  If
             not, then z_size_t is an unsigned integer type that can contain a
             pointer.

             [1mgzfread[22m() returns the number of full items read of size [4msize[24m, or
             zero if the end of the file was reached and a full item could not
             be read, or if there was an error.  [1mgzerror[22m() must be consulted
             if zero is returned in order to determine if there was an error.
             If the multiplication of [4msize[24m and [4mnitems[24m overflows, i.e. the
             product does not fit in a z_size_t, then nothing is read, zero is
             returned, and the error state is set to Z_STREAM_ERROR.

             In the event that the end of file is reached and only a partial
             item is available at the end, i.e. the remaining uncompressed
             data length is not a multiple of size, then the final partial
             item is nevetheless read into [4mbuf[24m and the end-of-file flag is
             set.  The length of the partial item read is not provided, but
             could be inferred from the result of [1mgztell[22m().  This behavior is
             the same as the behavior of fread(3) implementations in common
             libraries, but it prevents the direct use of [1mgzfread[22m() to read a
             concurrently written file, resetting and retrying on end-of-file,
             when size is not 1.

     [4mint[24m [1mgzwrite[22m([4mgzFile[24m [4mfile[24m, [4mvoidpc[24m [4mbuf[24m, [4munsigned[24m [4mlen[24m);

             The [1mgzwrite[22m() function writes the given number of uncompressed
             bytes into the compressed file.  [1mgzwrite[22m() returns the number of
             uncompressed bytes written or 0 in case of error.

     [4mz_size_t[24m [1mgzfwrite[22m([4mvoidpc[24m [4mbuf[24m, [4mz_size_t[24m [4msize[24m, [4mz_size_t[24m [4mnitems[24m, [4mgzFile[0m
             [4mfile[24m);

             [1mgzfwrite[22m() writes [4mnitems[24m items of size [4msize[24m from [4mbuf[24m to [4mfile[24m, du‐
             plicating the interface of stdio's fwrite(3), with size_t request
             and return types.  If the library defines size_t, then z_size_t
             is identical to size_t.  If not, then z_size_t is an unsigned in‐
             teger type that can contain a pointer.

             [1mgzfwrite[22m() returns the number of full items written of size [4msize[24m,
             or zero if there was an error.  If the multiplication of [4msize[24m and
             [4mnitems[24m overflows, i.e. the product does not fit in a z_size_t,
             then nothing is written, zero is returned, and the error state is
             set to Z_STREAM_ERROR.

     [4mint[24m [1mgzprintf[22m([4mgzFile[24m [4mfile[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

             The [1mgzprintf[22m() function converts, formats, and writes the args to
             the compressed file under control of the format string, as in
             fprintf(3).  [1mgzprintf[22m() returns the number of uncompressed bytes
             actually written, or a negative zlib error code in case of error.
             The number of uncompressed bytes written is limited to 8191, or
             one less than the buffer size given to [1mgzbuffer[22m().  The caller
             should ensure that this limit is not exceeded.  If it is ex‐
             ceeded, then [1mgzprintf[22m() will return an error (0) with nothing
             written.  In this case, there may also be a buffer overflow with
             unpredictable consequences, which is possible only if [1mzlib [22mwas
             compiled with the insecure functions [1msprintf[22m() or [1mvsprintf[22m() be‐
             cause the secure [1msnprintf[22m() or [1mvsnprintf[22m() functions were not
             available.  This can be determined using [1mzlibCompileFlags[22m().

     [4mint[24m [1mgzputs[22m([4mgzFile[24m [4mfile[24m, [4mconst[24m [4mchar[24m [4m*s[24m);

             The [1mgzputs[22m() function writes the given NUL-terminated string to
             the compressed file, excluding the terminating NUL character.

             [1mgzputs[22m() returns the number of characters written, or -1 in case
             of error.

     [4mchar[24m [4m*[24m [1mgzgets[22m([4mgzFile[24m [4mfile[24m, [4mchar[24m [4m*buf[24m, [4mint[24m [4mlen[24m);

             The [1mgzgets[22m() function reads bytes from the compressed file until
             len-1 characters are read, or a newline character is read and
             transferred to [4mbuf[24m, or an end-of-file condition is encountered.
             If any characters are read or if len == 1, the string is termi‐
             nated with a NUL character.  If no characters are read due to an
             end-of-file or len < 1, then the buffer is left untouched.

             [1mgzgets[22m() returns [4mbuf[24m, which is a NUL-terminated string, or it re‐
             turns NULL for end-of-file or in case of error.  If there was an
             error, the contents at [4mbuf[24m are indeterminate.

             [1mgzgets[22m() returns [4mbuf[24m, or NULL in case of error.

     [4mint[24m [1mgzputc[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mc[24m);

             The [1mgzputc[22m() function writes [4mc[24m, converted to an unsigned char,
             into the compressed file.  [1mgzputc[22m() returns the value that was
             written, or -1 in case of error.

     [4mint[24m [1mgzgetc[22m([4mgzFile[24m [4mfile[24m);

             The [1mgzgetc[22m() function reads one byte from the compressed file.
             [1mgzgetc[22m() returns this byte or -1 in case of end of file or error.
             This is implemented as a macro for speed.  As such, it does not
             do all of the checking the other functions do.  That is, it does
             not check to see if file is NULL, nor whether the structure [4mfile[0m
             points to has been clobbered or not.

     [4mint[24m [1mgzungetc[22m([4mint[24m [4mc[24m, [4mgzFile[24m [4mfile[24m);

             Push one character back onto the stream to be read as the first
             character on the next read.  At least one character of push-back
             is allowed.  [1mgzungetc[22m() returns the character pushed, or -1 on
             failure.  [1mgzungetc[22m() will fail if c is -1, and may fail if a
             character has been pushed but not read yet.  If [1mgzungetc[22m() is
             used immediately after [1mgzopen[22m() or [1mgzdopen[22m(), at least the output
             buffer size of pushed characters is allowed.  (See [1mgzbuffer[22m()
             above.)  The pushed character will be discarded if the stream is
             repositioned with [1mgzseek[22m() or [1mgzrewind[22m().

     [4mint[24m [1mgzflush[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4mflush[24m);

             The [1mgzflush[22m() function flushes all pending output into the com‐
             pressed file.  The parameter [4mflush[24m is as in the [1mdeflate[22m() func‐
             tion.  The return value is the [1mzlib [22merror number (see function
             [1mgzerror[22m() below).  [1mgzflush[22m() is only permitted when writing.

             If the flush parameter is Z_FINISH, the remaining data is written
             and the gzip stream is completed in the output.  If [1mgzwrite[22m() is
             called again, a new gzip stream will be started in the output.
             [1mgzread[22m() is able to read such concatenated gzip streams.

             [1mgzflush[22m() should be called only when strictly necessary because
             it will degrade compression if called too often.

     [4mz_off_t[24m [1mgzseek[22m([4mgzFile[24m [4mfile[24m, [4mz_off_t[24m [4moffset[24m, [4mint[24m [4mwhence[24m);

             Sets the starting position for the next [1mgzread[22m() or [1mgzwrite[22m() on
             the given compressed file.  The offset represents a number of
             bytes in the uncompressed data stream.  The whence parameter is
             defined as in lseek(2); the value SEEK_END is not supported.

             If the file is opened for reading, this function is emulated but
             can be extremely slow.  If the file is opened for writing, only
             forward seeks are supported; [1mgzseek[22m() then compresses a sequence
             of zeroes up to the new starting position.

             [1mgzseek[22m() returns the resulting offset location as measured in
             bytes from the beginning of the uncompressed stream, or -1 in
             case of error, in particular if the file is opened for writing
             and the new starting position would be before the current posi‐
             tion.

     [4mint[24m [1mgzrewind[22m([4mgzFile[24m [4mfile[24m);

             The [1mgzrewind[22m() function rewinds the given [4mfile[24m.  This function is
             supported only for reading.

             gzrewind(file) is equivalent to (int)gzseek(file, 0L, SEEK_SET).

     [4mz_off_t[24m [1mgztell[22m([4mgzFile[24m [4mfile[24m);

             The [1mgztell[22m() function returns the starting position for the next
             [1mgzread[22m() or [1mgzwrite[22m() on the given compressed file.  This posi‐
             tion represents a number of bytes in the uncompressed data
             stream, and is zero when starting, even if appending or reading a
             gzip stream from the middle of a file using [1mgzdopen[22m().

             gztell(file) is equivalent to gzseek(file, 0L, SEEK_CUR).

     [4mint[24m [1mgzeoffset[22m([4mgzFile[24m [4mfile[24m);

             Returns the current offset in the file being read or written.
             This offset includes the count of bytes that precede the gzip
             stream, for example when appending or when using [1mgzdopen[22m() for
             reading.  When reading, the offset does not include as yet unused
             buffered input.  This information can be used for a progress in‐
             dicator.  On error, [1mgzoffset[22m() returns -1.

     [4mint[24m [1mgzeof[22m([4mgzFile[24m [4mfile[24m);

             Returns true (1) if the end-of-file indicator has been set while
             reading, false (0) otherwise.  Note that the end-of-file indica‐
             tor is set only if the read tried to go past the end of the in‐
             put, but came up short.  Therefore just like feof(3), [1mgzeof[22m() may
             return false even if there is no more data to read, in the event
             that the last read request was for the exact number of bytes re‐
             maining in the input file.  This will happen if the input file
             size is an exact multiple of the buffer size.

             If [1mgzeof[22m() returns true, then the read functions will return no
             more data, unless the end-of-file indicator is reset by
             [1mgzclearerr[22m() and the input file has grown since the previous end
             of file was detected.

     [4mint[24m [1mgzdirect[22m([4mgzFile[24m [4mfile[24m);

             Returns true (1) if [4mfile[24m is being copied directly while reading,
             or false (0) if [4mfile[24m is a gzip stream being decompressed.

             If the input file is empty, [1mgzdirect[22m() will return true, since
             the input does not contain a gzip stream.

             If [1mgzdirect[22m() is used immediately after [1mgzopen[22m() or [1mgzdopen[22m(), it
             will cause buffers to be allocated to allow reading the file to
             determine if it is a gzip file.  Therefore if [1mgzbuffer[22m() is used,
             it should be called before [1mgzdirect[22m().

             When writing, [1mgzdirect[22m() returns true (1) if transparent writing
             was requested ("wT" for the [1mgzopen[22m() mode), or false (0) other‐
             wise.  (Note: [1mgzdirect[22m() is not needed when writing.  Transparent
             writing must be explicitly requested, so the application already
             knows the answer.  When linking statically, using [1mgzdirect[22m() will
             include all of the zlib code for gzip file reading and decompres‐
             sion, which may not be desired.)

     [4mint[24m [1mgzclose[22m([4mgzFile[24m [4mfile[24m);

             Flushes all pending output if necessary, closes the compressed
             file and deallocates the (de)compression state.  Note that once
             file is closed, you cannot call [1mgzerror[22m() with [4mfile[24m, since its
             structures have been deallocated.  [1mgzclose[22m() must not be called
             more than once on the same file, just as free(3) must not be
             called more than once on the same allocation.

             [1mgzclose[22m() will return Z_STREAM_ERROR if [4mfile[24m is not valid,
             Z_ERRNO on a file operation error, Z_MEM_ERROR if out of memory,
             Z_BUF_ERROR if the last read ended in the middle of a gzip
             stream, or Z_OK on success.

     [4mint[24m [1mgzclose_r[22m([4mgzFile[24m [4mfile[24m);

     [4mint[24m [1mgzclose_w[22m([4mgzFile[24m [4mfile[24m);

             Same as [1mgzclose[22m(), but [1mgzclose_r[22m() is only for use when reading,
             and [1mgzclose_w[22m() is only for use when writing or appending.  The
             advantage to using these instead of [1mgzclose[22m() is that they avoid
             linking in zlib compression or decompression code that is not
             used when only reading or only writing, respectively.  If
             [1mgzclose[22m() is used, then both compression and decompression code
             will be included in the application when linking to a static zlib
             library.

     [4mconst[24m [4mchar[24m [4m*[24m [1mgzerror[22m([4mgzFile[24m [4mfile[24m, [4mint[24m [4m*errnum[24m);

             The [1mgzerror[22m() function returns the error message for the last er‐
             ror which occurred on the given compressed [4mfile[24m.  [4merrnum[24m is set
             to the [1mzlib [22merror number.  If an error occurred in the file sys‐
             tem and not in the compression library, [4merrnum[24m is set to Z_ERRNO
             and the application may consult errno to get the exact error
             code.

             The application must not modify the returned string.  Future
             calls to this function may invalidate the previously returned
             string.  If [4mfile[24m is closed, then the string previously returned
             by [1mgzerror[22m() will no longer be available.

             [1mgzerror[22m() should be used to distinguish errors from end-of-file
             for those functions above that do not distinguish those cases in
             their return values.

     [4mvoid[24m [1mgzclearerr[22m([4mgzFile[24m [4mfile[24m);
             Clears the error and end-of-file flags for [4mfile[24m.  This is analo‐
             gous to the [1mclearerr[22m() function in stdio.  This is useful for
             continuing to read a gzip file that is being written concur‐
             rently.

[1mCHECKSUM FUNCTIONS[0m
     These functions are not related to compression but are exported anyway
     because they might be useful in applications using the compression li‐
     brary.

     [4muLong[24m [1madler32[22m([4muLong[24m [4madler[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4muInt[24m [4mlen[24m);
             The [1madler32[22m() function updates a running Adler-32 checksum with
             the bytes buf[0..len-1] and returns the updated checksum.  If [4mbuf[0m
             is NULL, this function returns the required initial value for the
             checksum.

             An Adler-32 checksum is almost as reliable as a CRC-32 but can be
             computed much faster.  Usage example:

                   uLong adler = adler32(0L, NULL, 0);

                   while (read_buffer(buffer, length) != EOF) {
                   adler = adler32(adler, buffer, length);
                   }
                   if (adler != original_adler) error();

     [4muLong[24m [1madler32_z[22m([4muLong[24m [4madler[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4mz_size_t[24m [4mlen[24m);

             The same as [1madler32[22m(), but with a size_t length.

     [4muLong[24m [1madler32_combine[22m([4muLong[24m [4madler1[24m, [4muLong[24m [4madler2[24m, [4mz_off_t[24m [4mlen2[24m);

             The [1madler32_combine[22m() function combines two Adler-32 checksums
             into one.  For two sequences of bytes, seq1 and seq2 with lengths
             len1 and len2, Adler-32 checksums are calculated for each, adler1
             and adler2.  [1madler32_combine[22m() returns the Adler-32 checksum of
             seq1 and seq2 concatenated, requiring only adler1, adler2, and
             len2.  Note that the z_off_t type (like off_t) is a signed inte‐
             ger.  If [4mlen2[24m is negative, the result has no meaning or utility.

     [4muLong[24m [1mcrc32[22m([4muLong[24m [4mcrc[24m, [4mconst[24m [4mBytef[24m [4m*buf[24m, [4muInt[24m [4mlen[24m);

             The [1mcrc32[22m() function updates a running CRC-32 with the bytes
             buf[0..len-1] and returns the updated CRC-32.  If [4mbuf[24m is NULL,
             this function returns the required initial value for the CRC.
             Pre- and post-conditioning (one's complement) is performed within
             this function so it shouldn't be done by the application.  Usage
             example:

                   uLong crc = crc32(0L, NULL, 0);

                   while (read_buffer(buffer, length) != EOF) {
                   crc = crc32(crc, buffer, length);
                   }
                   if (crc != original_crc) error();

     [4muLong[24m [1mcrc32_z[22m([4muLong[24m [4madler[24m , [4mconst[24m, [4mBytef[24m, [4m*buf"[24m, [4mz_size_t[24m [4mlen[24m);

             The same as [1mcrc32[22m(), but with a size_t length.

     [4muLong[24m [1mcrc32_combine[22m([4muLong[24m [4mcrc1[24m, [4muLong[24m [4mcrc2[24m, [4mz_off_t[24m [4mlen2[24m);

             The [1mcrc32_combine[22m() function combines two CRC-32 check values
             into one.  For two sequences of bytes, seq1 and seq2 with lengths
             len1 and len2, CRC-32 check values are calculated for each, crc1
             and crc2.  [1mcrc32_combine[22m() returns the CRC-32 check value of seq1
             and seq2 concatenated, requiring only crc1, crc2, and len2.

[1mSTRUCTURES[0m
     struct internal_state;

     typedef struct z_stream_s {
         Bytef    *next_in;  /* next input byte */
         uInt     avail_in;  /* number of bytes available at next_in */
         off_t    total_in;  /* total number of input bytes read so far */

         Bytef    *next_out; /* next output byte will go here */
         uInt     avail_out; /* remaining free space at next_out */
         off_t    total_out; /* total number of bytes output so far */

         char     *msg;      /* last error message, NULL if no error */
         struct internal_state FAR *state; /* not visible by applications */

         alloc_func zalloc;  /* used to allocate the internal state */
         free_func  zfree;   /* used to free the internal state */
         voidpf     opaque;  /* private data object passed to zalloc and zfree*/

         int     data_type;  /* best guess about the data type: binary or text
                                for deflate, or the decoding state for inflate */
         uLong   adler;      /* Adler-32 or CRC-32 value of the uncompressed data */
         uLong   reserved;   /* reserved for future use */
     } z_stream;

     typedef z_stream FAR * z_streamp;

     /*
          gzip header information passed to and from zlib routines.
       See RFC 1952 for more details on the meanings of these fields.
     */
     typedef struct gz_header_s {
         int     text;       /* true if compressed data believed to be text */
         uLong   time;       /* modification time */
         int     xflags;     /*extra flags (not used when writing a gzip file)*/
         int     os;         /* operating system */
         Bytef   *extra;     /* pointer to extra field or NULL if none */
         uInt    extra_len;  /* extra field length (valid if extra != NULL) */
         uInt    extra_max;  /* space at extra (only when reading header) */
         Bytef   *name;      /* pointer to zero-terminated file name or NULL*/
         uInt    name_max;   /* space at name (only when reading header) */
         Bytef   *comment;   /* pointer to zero-terminated comment or NULL */
         uInt    comm_max;   /* space at comment (only when reading header) */
         int     hcrc;       /* true if there was or will be a header crc */
         int     done;       /* true when done reading gzip header (not used
                                when writing a gzip file) */
     } gz_header;

     typedef gz_header FAR *gz_headerp;

     The application must update [4mnext_in[24m and [4mavail_in[24m when [4mavail_in[24m has
     dropped to zero.  It must update [4mnext_out[24m and [4mavail_out[24m when [4mavail_out[0m
     has dropped to zero.  The application must initialize [4mzalloc[24m, [4mzfree[24m, and
     [4mopaque[24m before calling the init function.  All other fields are set by the
     compression library and must not be updated by the application.

     The [4mopaque[24m value provided by the application will be passed as the first
     parameter for calls to [1mzalloc[22m() and [1mzfree[22m().  This can be useful for cus‐
     tom memory management.  The compression library attaches no meaning to
     the [4mopaque[24m value.

     [4mzalloc[24m must return NULL if there is not enough memory for the object.  If
     [1mzlib [22mis used in a multi-threaded application, [4mzalloc[24m and [4mzfree[24m must be
     thread safe.  In that case, [1mzlib [22mis thread-safe.  When [4mzalloc[24m and [4mzfree[0m
     are NULL on entry to the initialization function, they are set to inter‐
     nal routines that use the standard library functions malloc(3) and
     free(3).

     On 16-bit systems, the functions [4mzalloc[24m and [4mzfree[24m must be able to allo‐
     cate exactly 65536 bytes, but will not be required to allocate more than
     this if the symbol MAXSEG_64K is defined (see <[4mzconf.h[24m>).

     WARNING: On MSDOS, pointers returned by [4mzalloc[24m for objects of exactly
     65536 bytes *must* have their offset normalized to zero.  The default al‐
     location function provided by this library ensures this (see [4mzutil.c[24m).
     To reduce memory requirements and avoid any allocation of 64K objects, at
     the expense of compression ratio, compile the library with -DMAX_WBITS=14
     (see <[4mzconf.h[24m>).

     The fields [4mtotal_in[24m and [4mtotal_out[24m can be used for statistics or progress
     reports.  After compression, [4mtotal_in[24m holds the total size of the uncom‐
     pressed data and may be saved for use in the decompressor (particularly
     if the decompressor wants to decompress everything in a single step).

[1mCONSTANTS[0m
     #define Z_NO_FLUSH      0
     #define Z_PARTIAL_FLUSH 1
     #define Z_SYNC_FLUSH    2
     #define Z_FULL_FLUSH    3
     #define Z_FINISH        4
     #define Z_BLOCK         5
     #define Z_TREES         6
     /* Allowed flush values; see deflate() and inflate() below for details */

     #define Z_OK            0
     #define Z_STREAM_END    1
     #define Z_NEED_DICT     2
     #define Z_ERRNO        (-1)
     #define Z_STREAM_ERROR (-2)
     #define Z_DATA_ERROR   (-3)
     #define Z_MEM_ERROR    (-4)
     #define Z_BUF_ERROR    (-5)
     #define Z_VERSION_ERROR (-6)
     /* Return codes for the compression/decompression functions.
      * Negative values are errors,
      * positive values are used for special but normal events.
      */

     #define Z_NO_COMPRESSION         0
     #define Z_BEST_SPEED             1
     #define Z_BEST_COMPRESSION       9
     #define Z_DEFAULT_COMPRESSION  (-1)
     /* compression levels */

     #define Z_FILTERED            1
     #define Z_HUFFMAN_ONLY        2
     #define Z_RLE                 3
     #define Z_FIXED               4
     #define Z_DEFAULT_STRATEGY    0
     /* compression strategy; see deflateInit2() below for details */

     #define Z_BINARY   0
     #define Z_TEXT     1
     #define Z_ASCII    Z_TEXT /* for compatibility with 1.2.2 and earlier */
     #define Z_UNKNOWN  2
     /* Possible values of the data_type field for deflate() */

     #define Z_DEFLATED   8
     /* The deflate compression method
      * (the only one supported in this version)
     */

     #define Z_NULL  0  /* for initializing zalloc, zfree, opaque */

     #define zlib_version zlibVersion()
     /* for compatibility with versions < 1.0.2 */

[1mVARIOUS HACKS[0m
     deflateInit and inflateInit are macros to allow checking the [1mzlib [22mversion
     and the compiler's view of [4mz_stream[24m.

     [4mint[24m [1mdeflateInit_[22m([4mz_stream[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mconst[24m [4mchar[24m [4m*version[24m, [4mint[0m
             [4mstream_size[24m);

     [4mint[24m [1minflateInit_[22m([4mz_stream[24m [4mstrm[24m, [4mconst[24m [4mchar[24m [4m*version[24m, [4mint[24m [4mstream_size[24m);

     [4mint[24m [1mdeflateInit2_[22m([4mz_stream[24m [4mstrm[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4mmethod[24m, [4mint[24m [4mwindowBits[24m,
             [4mint[24m [4mmemLevel[24m, [4mint[24m [4mstrategy[24m, [4mconst[24m [4mchar[24m [4m*version[24m,
             [4mint[24m [4mstream_size[24m);

     [4mint[24m [1minflateInit2_[22m([4mz_stream[24m [4mstrm[24m, [4mint[24m [4mwindowBits[24m, [4mconst[24m [4mchar[24m [4m*version[24m, [4mint[0m
             [4mstream_size[24m);

     [4mint[24m [1minflateBackInit_[22m([4mz_stream[24m [4m*strm[24m, [4mint[24m [4mwindowBits[24m, [4munsigned[24m [4mchar[24m [4mFAR[0m
             [4m*window[24m, [4mconst[24m [4mchar[24m [4m*version[24m, [4mint[24m [4mstream_size[24m);

     [4mconst[24m [4mchar[24m [4m*[24m [1mzError[22m([4mint[24m [4merr[24m);

     [4mint[24m [1minflateSyncPoint[22m([4mz_streamp[24m [4mz[24m);

     [4mconst[24m [4muLongf[24m [4m*[24m [1mget_crc_table[22m([4mvoid[24m);

[1mSEE ALSO[0m
     compress(1), gzip(1)

[1mSTANDARDS[0m
     P. Deutsch and J-L. Gailly, [4mZLIB[24m [4mCompressed[24m [4mData[24m [4mFormat[24m [4mSpecification[0m
     [4mversion[24m [4m3.3[24m, RFC 1950, May 1996.

     P. Deutsch, [4mDEFLATE[24m [4mCompressed[24m [4mData[24m [4mFormat[24m [4mSpecification[24m [4mversion[24m [4m1.3[24m, RFC
     1951, May 1996.

     P. Deutsch, [4mGZIP[24m [4mfile[24m [4mformat[24m [4mspecification[24m [4mversion[24m [4m4.3[24m, RFC 1952, May
     1996.

[1mHISTORY[0m
     This manual page is based on an HTML version of <[4mzlib.h[24m> converted by
     piaip <[4mpiaip@csie.ntu.edu.tw[24m> and was converted to mdoc format by the
     OpenBSD project.

[1mAUTHORS[0m
     Jean-loup Gailly <[4mjloup@gzip.org[24m>
     Mark Adler <[4mmadler@alumni.caltech.edu[24m>

BSD                              July 6, 2021                              BSD
